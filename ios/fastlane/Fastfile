default_platform(:ios)

platform :ios do
  desc "Create the thriftwood Keychain"
  lane :keychain_create do
    create_keychain(
      name: ENV["MATCH_KEYCHAIN_NAME"],
      password: ENV["MATCH_KEYCHAIN_PASSWORD"],
      default_keychain: is_ci,
      unlock: true,
      timeout: 3600,
      lock_when_sleeps: false
    )
  end

  desc "Delete the thriftwood Keychain"
  lane :keychain_delete do
    delete_keychain(name: ENV["MATCH_KEYCHAIN_NAME"])
  end

  desc "Setup the Keychain"
  lane :keychain_setup do
    # Development
    match(
      type: "development",
      readonly: is_ci,
      keychain_name: ENV['MATCH_KEYCHAIN_NAME'],
      keychain_password: ENV["MATCH_KEYCHAIN_PASSWORD"],
    )

    # App Store
    match(
      type: "appstore",
      readonly: is_ci,
      keychain_name: ENV['MATCH_KEYCHAIN_NAME'],
      keychain_password: ENV["MATCH_KEYCHAIN_PASSWORD"],
    )
  end

  desc "Connect to App Store Connect"
  lane :connect_appstore_connect do
    app_store_connect_api_key(
      key_id: "SNT5D984B4",
      issuer_id: ENV["APPLE_STORE_CONNECT_ISSUER_ID"],
      key_filepath: File.expand_path("~/code/fastlane_private/AuthKey_SNT5D984B4.p8"),
    )
  end

  desc "Setup environment and validate configuration"
  lane :setup_environment do
    required_env_vars = [
      "MATCH_KEYCHAIN_NAME",
      "MATCH_KEYCHAIN_PASSWORD", 
      "IOS_CODESIGNING_IDENTITY"
    ]
    
    missing_vars = required_env_vars.select { |var| ENV[var].nil? || ENV[var].empty? }
    
    unless missing_vars.empty?
      UI.user_error!("‚ùå Missing required environment variables: #{missing_vars.join(', ')}")
    end
    
    UI.success("‚úÖ Environment configuration verified")
  end

  desc "Build App Package for App Store"
  lane :build_appstore do |options|
    setup_environment
    keychain_create
    keychain_setup
    flutter_clean

    sh(
      "flutter", "build", "ios",
      "--release",
      "--no-codesign",
      "--build-number=#{options[:build_number] || ENV['BUILD_NUMBER'] || '1'}",
    )
    
    build_ios_app(
      scheme: "Runner",
      workspace: "Runner.xcworkspace",
      export_method: "app-store",
      codesigning_identity: ENV["IOS_CODESIGNING_IDENTITY"],
      export_options: {
        provisioningProfiles: {
          "eu.mpwg.thriftwood" => "match AppStore eu.mpwg.thriftwood"
        }
      }
    )
    
    sh("mkdir", "-p", "../../output")
    sh("cp", "Runner.ipa", "../../output/thriftwood-ios.ipa")
    
    UI.success("‚úÖ iOS App Store build completed: output/thriftwood-ios.ipa")

    keychain_delete
  end

  desc "Build for development/testing"
  lane :build_development do |options|
    setup_environment
    keychain_create
    keychain_setup
    flutter_clean

    sh(
      "flutter", "build", "ios",
      "--release",
      "--no-codesign",
      "--build-number=#{options[:build_number] || ENV['BUILD_NUMBER'] || '1'}",
    )
    
    build_ios_app(
      scheme: "Runner",
      workspace: "Runner.xcworkspace",
      export_method: "development",
      codesigning_identity: ENV["IOS_CODESIGNING_IDENTITY"],
      export_options: {
        provisioningProfiles: {
          "eu.mpwg.thriftwood" => "match Development eu.mpwg.thriftwood"
        }
      }
    )
    
    sh("mkdir", "-p", "../../output")
    sh("cp", "Runner.ipa", "../../output/thriftwood-ios-dev.ipa")
    
    UI.success("‚úÖ iOS Development build completed: output/thriftwood-ios-dev.ipa")

    keychain_delete
  end

  desc "Deploy to App Store Connect"
  lane :deploy_appstore do |options|
    unless options[:ipa] && File.exist?(options[:ipa])
      UI.user_error!("‚ùå IPA file required for App Store deployment. Build with build_appstore first.")
    end
    
    connect_appstore_connect

    upload_to_testflight(
      changelog: options[:changelog] || "New build via Fastlane",
      distribute_external: options[:distribute_external] || false,
      groups: options[:groups],
      ipa: options[:ipa],
      notify_external_testers: options[:notify_external_testers] || false,
    )
    
    UI.success("‚úÖ Successfully deployed to App Store Connect")
  end

  private_lane :flutter_clean do
    sh("flutter", "clean")
    UI.message("üßπ Flutter clean completed")
  end
end

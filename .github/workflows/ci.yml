name: CI
permissions:
  contents: read

# Trigger on push and pull requests to main/develop branches
on:
  push:
    branches: [main, develop]
    paths-ignore:
      - "**.md"
      - "docs/**"
      - "legacy/**"
      - ".gitignore"
  pull_request:
    branches: [main, develop]
    paths-ignore:
      - "**.md"
      - "docs/**"
      - "legacy/**"

# Cancel in-progress runs when new push occurs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ==============================================
  # Main CI Job: Build, Test, Lint
  # ==============================================
  build-and-test:
    name: Build & Test
    runs-on: macos-26 # Latest macOS with Apple Silicon

    steps:
      # Checkout code
      - name: Checkout
        uses: actions/checkout@v5

      # Setup Xcode version using official action
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "26.0"

      # Show Xcode and Swift versions for debugging
      - name: Show Versions
        run: |
          xcodebuild -version
          swift --version

      # Install SwiftLint for code quality checks
      - name: Install SwiftLint
        run: brew install swiftlint

      # Check GPL-3.0 license headers
      - name: Check License Headers
        run: |
          ./scripts/check-license-headers.sh --check
        continue-on-error: false # Fail CI if headers are missing

      # Run SwiftLint
      - name: Lint Code
        run: swiftlint lint --strict --reporter github-actions-logging
        continue-on-error: true # continue on lint errors

      # Cache Swift Package Manager dependencies
      - name: Cache SPM Dependencies
        uses: actions/cache@v4
        with:
          path: |
            .build
            ~/Library/Developer/Xcode/DerivedData/**/SourcePackages
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved', '**/*.xcodeproj/project.pbxproj') }}
          restore-keys: |
            ${{ runner.os }}-spm-

      # Cache derived data to speed up builds
      - name: Cache DerivedData
        uses: actions/cache@v4
        with:
          path: ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-deriveddata-${{ hashFiles('**/*.swift', '**/*.xcodeproj/project.pbxproj') }}
          restore-keys: |
            ${{ runner.os }}-deriveddata-

      # Build the app (Mac Catalyst)
      - name: Build App
        run: |
          xcodebuild build-for-testing \
            -project Thriftwood.xcodeproj \
            -scheme Thriftwood \
            -destination 'platform=macOS,variant=Mac Catalyst' \
            -configuration Debug \
            CODE_SIGNING_ALLOWED=NO \
            -parallel-testing-enabled YES \
            | xcpretty && exit ${PIPESTATUS[0]}

      # Run unit tests (Mac Catalyst)
      - name: Run Tests
        run: |
          xcodebuild test-without-building \
            -project Thriftwood.xcodeproj \
            -scheme Thriftwood \
            -destination 'platform=macOS,variant=Mac Catalyst' \
            -configuration Debug \
            CODE_SIGNING_ALLOWED=NO \
            -enableCodeCoverage YES \
            -parallel-testing-enabled YES \
            | xcpretty && exit ${PIPESTATUS[0]}

      # Archive test results (if tests fail, this helps debugging)
      - name: Upload Test Results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            ~/Library/Developer/Xcode/DerivedData/**/Logs/Test/*.xcresult
          retention-days: 7

  # ==============================================
  # Code Quality Summary (Optional)
  # ==============================================
  code-quality:
    name: Code Quality Summary
    runs-on: macos-26
    needs: build-and-test
    if: always()

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install SwiftLint
        run: brew install swiftlint

      - name: Generate Lint Report
        run: |
          echo "## Code Quality Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          swiftlint lint --reporter markdown >> $GITHUB_STEP_SUMMARY || true
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "âœ… All checks completed!" >> $GITHUB_STEP_SUMMARY

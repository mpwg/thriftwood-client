# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Load environment variables from .env file if it exists, otherwise use system environment variables
env_file_path = File.join(File.dirname(__FILE__), '..', '.env')
if File.exist?(env_file_path)
  require 'dotenv'
  Dotenv.load(env_file_path)
  UI.message("📄 Loaded environment variables from .env file")
else
  UI.message("🌍 Using system environment variables (no .env file found)")
end

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

# Global configuration
SCHEME_NAME = "ThriftwoodNative"
WORKSPACE_PATH = "./ThriftwoodNative.xcodeproj"
APP_IDENTIFIER = "eu.mpwg.thriftwood"

platform :ios do
  before_all do
#    ensure_xcode_version(version: "15.0")
    
    # Setup keychain for CI
    if is_ci
      create_keychain(
        name: "CI",
        password: ENV["KEYCHAIN_PASSWORD"],
        default_keychain: true,
        unlock: true,
        timeout: 3600,
        lock_when_sleeps: false
      )
    end
  end

  after_all do |lane|
    # Clean up keychain on CI
    if is_ci
      delete_keychain(name: "CI")
    end
  end

  error do |lane, exception|
    # Clean up keychain on CI even if there's an error
    if is_ci
      delete_keychain(name: "CI") rescue nil
    end
  end

  # MARK: - Development Builds

  desc "Build development version for testing"
  lane :dev do
    setup_ci_if_needed

    sync_certificates(type: "development")

    build_app(common_build_config.merge({
      configuration: "Debug",
      export_method: "development",
      output_directory: "./build/development",
      output_name: "#{SCHEME_NAME}-development.ipa",
      skip_profile_detection: false
    }))

    UI.success("✅ Development build completed successfully!")
  end

  # MARK: - Beta Builds (TestFlight)

  desc "Build and upload to TestFlight"
  lane :beta do
    setup_ci_if_needed

    # Increment build number
    increment_build_number(
      build_number: latest_testflight_build_number + 1,
      xcodeproj: WORKSPACE_PATH
    )

    sync_certificates(type: "appstore")

    build_app(common_build_config.merge({
      configuration: "Release",
      export_method: "app-store",
      output_directory: "./build/testflight",
      output_name: "#{SCHEME_NAME}-testflight.ipa",
      skip_profile_detection: true
    }))

    upload_to_testflight(
      app_identifier: APP_IDENTIFIER,
      skip_waiting_for_build_processing: true,
      distribute_external: false,
      notify_external_testers: false,
      changelog: "Bug fixes and improvements"
    )

    UI.success("✅ TestFlight upload completed successfully!")
  end

  # MARK: - Production Builds (App Store)

  desc "Build and upload to App Store"
  lane :release do
    setup_ci_if_needed

    # Ensure we're on main branch for releases
    ensure_git_branch(branch: 'main')

    # Increment version number (patch version)
    increment_version_number(
      bump_type: "patch",
      xcodeproj: WORKSPACE_PATH
    )

    # Increment build number
    increment_build_number(
      build_number: latest_testflight_build_number + 1,
      xcodeproj: WORKSPACE_PATH
    )

    sync_certificates(type: "appstore")

    build_app(common_build_config.merge({
      configuration: "Release",
      export_method: "app-store",
      output_directory: "./build/appstore",
      output_name: "#{SCHEME_NAME}-appstore.ipa",
      skip_profile_detection: true
    }))

    upload_to_app_store(
      app_identifier: APP_IDENTIFIER,
      skip_metadata: true,
      skip_screenshots: true,
      submit_for_review: false, # Manual submission for production
      automatic_release: false,
      force: true
    )

    # Commit version bump
    commit_version_bump(
      message: "Version bump for App Store release",
      xcodeproj: WORKSPACE_PATH
    )

    # Add git tag
    add_git_tag(
      tag: get_version_number(xcodeproj: WORKSPACE_PATH)
    )

    UI.success("✅ App Store upload completed successfully!")
    UI.success("🏷️  Tagged version: #{get_version_number(xcodeproj: WORKSPACE_PATH)}")
  end

  # MARK: - Build Only (for CI validation)

  desc "Build app without distribution (for CI validation)"
  lane :build do
    setup_ci_if_needed

    sync_certificates(type: "development")

    build_app(common_build_config.merge({
      configuration: "Debug",
      export_method: "development",
      output_directory: "./build/validation",
      output_name: "#{SCHEME_NAME}-validation.ipa",
      skip_profile_detection: true,
      skip_archive: false
    }))

    UI.success("✅ Build validation completed successfully!")
  end

  # MARK: - Code Signing

  desc "Sync development certificates and provisioning profiles"
  lane :certificates do
    setup_ci_if_needed
    sync_certificates(type: "development")
    sync_certificates(type: "appstore")
  end

  desc "Update certificates and push to git"
  lane :update_certificates do
    configure_app_store_connect
    UI.success("DEBUG: Before updating certificates")

    match(
      type: "development",
      app_identifier: APP_IDENTIFIER,
      git_url: ENV["MATCH_GIT_URL"],
      git_basic_authorization: ENV["MATCH_GIT_BASIC_AUTHORIZATION"],
      force_for_new_devices: true,
      readonly: false,
      verbose: true
    )
    UI.success("DEBUG: After updating development certificates")
    match(
      type: "appstore",
      app_identifier: APP_IDENTIFIER,
      git_url: ENV["MATCH_GIT_URL"],
      git_basic_authorization: ENV["MATCH_GIT_BASIC_AUTHORIZATION"],
      readonly: false,
      verbose: true
    )
    UI.success("✅ Certificates updated and pushed to git!")
  end

  # MARK: - Helper Methods

  private_lane :setup_ci_if_needed do
    if is_ci
      setup_ci
    end
  end

  private_lane :common_build_config do
    {
      scheme: SCHEME_NAME,
      project: WORKSPACE_PATH,
      clean: true,
      include_bitcode: false,
      # Let match determine the identity and profile
      codesigning_identity: "",  # Let match determine the identity
      export_xcargs: "-allowProvisioningUpdates"
    }
  end

  private_lane :configure_app_store_connect do
    if ENV["FASTLANE_SESSION"]
      UI.message("🔑 Using FASTLANE_SESSION for App Store Connect authentication")
    else
      UI.message("⚠️  FASTLANE_SESSION not configured - some operations may require manual authentication")
    end
  end

  private_lane :sync_certificates do |options|
    type = options[:type]

    # Validate required environment variables
    required_match_vars = ["MATCH_GIT_URL", "MATCH_PASSWORD"]
    missing_vars = required_match_vars.select { |var| ENV[var].nil? || ENV[var].empty? }

    if missing_vars.any?
      UI.error("❌ Missing required environment variables for fastlane match: #{missing_vars.join(', ')}")
      UI.error("💡 Please check your .env file or environment configuration")
      raise "Missing required environment variables for code signing"
    end

    # Configure App Store Connect authentication if available (required for creating new certificates)
    configure_app_store_connect

    UI.message("🔐 Syncing #{type} certificates and provisioning profiles with fastlane match")
    UI.message("🚧 Ensuring Fastlane handles code signing (not Xcode automatic signing)")

    begin
      match(
        type: type,
        app_identifier: APP_IDENTIFIER,
        git_url: ENV["MATCH_GIT_URL"],
        git_basic_authorization: ENV["MATCH_GIT_BASIC_AUTHORIZATION"],
        keychain_name: is_ci ? "CI" : nil,
        keychain_password: is_ci ? ENV["KEYCHAIN_PASSWORD"] : nil,
        readonly: is_ci,
        verbose: true,
        # Ensure Fastlane manages signing, not Xcode
        skip_confirmation: true,
        shallow_clone: true
      )
      UI.success("✅ Successfully synced #{type} certificates")
      UI.message("🔒 Code signing will be handled by Fastlane, not Xcode")
    rescue => e
      UI.error("❌ Failed to sync certificates: #{e.message}")
      UI.error("💡 Common solutions:")
      UI.error("   • Check MATCH_PASSWORD is correct")
      UI.error("   • Verify MATCH_GIT_URL is accessible")
      UI.error("   • Ensure certificates exist in match repository")
      UI.error("   • Run 'fastlane update_certificates' if certificates need to be created")
      raise e
    end
  end

  # MARK: - Utility Lanes

  desc "Show current version and build number"
  lane :version do
    version = get_version_number(xcodeproj: WORKSPACE_PATH)
    build = get_build_number(xcodeproj: WORKSPACE_PATH)
    UI.message("📱 Current version: #{version} (#{build})")
  end

  desc "Show available lanes"
  lane :show_help do
    UI.header("📋 Available Fastlane Lanes")
    UI.message("🔨 Development:")
    UI.message("  • fastlane dev        - Build development version")
    UI.message("  • fastlane build      - Build for CI validation")
    UI.message("")
    UI.message("🧪 Testing:")
    UI.message("  • fastlane beta       - Build and upload to TestFlight")
    UI.message("")
    UI.message("🚀 Production:")
    UI.message("  • fastlane release    - Build and upload to App Store")
    UI.message("")
    UI.message("🔐 Code Signing:")
    UI.message("  • fastlane certificates        - Sync existing certificates")
    UI.message("  • fastlane update_certificates - Update and push new certificates")
    UI.message("")
    UI.message("ℹ️  Utility:")
    UI.message("  • fastlane version   - Show current app version")
    UI.message("  • fastlane show_help - Show this help")
  end
end
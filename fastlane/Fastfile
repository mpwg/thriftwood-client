# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

# Global configuration
SCHEME_NAME = "ThriftwoodNative"
WORKSPACE_PATH = "./ThriftwoodNative.xcodeproj"
APP_IDENTIFIER = "app.thriftwood.native"

platform :ios do
  before_all do
    ensure_xcode_version(version: "15.0")
    
    # Setup keychain for CI
    if is_ci
      create_keychain(
        name: "CI",
        password: ENV["KEYCHAIN_PASSWORD"],
        default_keychain: true,
        unlock: true,
        timeout: 3600,
        lock_when_sleeps: false
      )
    end
  end

  after_all do |lane|
    # Clean up keychain on CI
    if is_ci
      delete_keychain(name: "CI")
    end
  end

  error do |lane, exception|
    # Clean up keychain on CI even if there's an error
    if is_ci
      delete_keychain(name: "CI") rescue nil
    end
  end

  # MARK: - Development Builds

  desc "Build development version for testing"
  lane :dev do
    setup_ci_if_needed
    
    sync_code_signing(type: "development")
    
    build_app(
      scheme: SCHEME_NAME,
      project: WORKSPACE_PATH,
      configuration: "Debug",
      export_method: "development",
      output_directory: "./build/development",
      output_name: "#{SCHEME_NAME}-development.ipa",
      clean: true,
      include_bitcode: false,
      skip_profile_detection: true
    )
    
    UI.success("‚úÖ Development build completed successfully!")
  end

  # MARK: - Beta Builds (TestFlight)

  desc "Build and upload to TestFlight"
  lane :beta do
    setup_ci_if_needed
    
    # Increment build number
    increment_build_number(
      build_number: latest_testflight_build_number + 1,
      xcodeproj: WORKSPACE_PATH
    )
    
    sync_code_signing(type: "appstore")
    
    build_app(
      scheme: SCHEME_NAME,
      project: WORKSPACE_PATH,
      configuration: "Release",
      export_method: "app-store",
      output_directory: "./build/testflight",
      output_name: "#{SCHEME_NAME}-testflight.ipa",
      clean: true,
      include_bitcode: false,
      skip_profile_detection: true
    )
    
    upload_to_testflight(
      app_identifier: APP_IDENTIFIER,
      skip_waiting_for_build_processing: true,
      distribute_external: false,
      notify_external_testers: false,
      changelog: "Bug fixes and improvements"
    )
    
    UI.success("‚úÖ TestFlight upload completed successfully!")
  end

  # MARK: - Production Builds (App Store)

  desc "Build and upload to App Store"
  lane :release do
    setup_ci_if_needed
    
    # Ensure we're on main branch for releases
    ensure_git_branch(branch: 'main')
    
    # Increment version number (patch version)
    increment_version_number(
      bump_type: "patch",
      xcodeproj: WORKSPACE_PATH
    )
    
    # Increment build number
    increment_build_number(
      build_number: latest_testflight_build_number + 1,
      xcodeproj: WORKSPACE_PATH
    )
    
    sync_code_signing(type: "appstore")
    
    build_app(
      scheme: SCHEME_NAME,
      project: WORKSPACE_PATH,
      configuration: "Release",
      export_method: "app-store",
      output_directory: "./build/appstore",
      output_name: "#{SCHEME_NAME}-appstore.ipa",
      clean: true,
      include_bitcode: false,
      skip_profile_detection: true
    )
    
    upload_to_app_store(
      app_identifier: APP_IDENTIFIER,
      skip_metadata: true,
      skip_screenshots: true,
      submit_for_review: false, # Manual submission for production
      automatic_release: false,
      force: true
    )
    
    # Commit version bump
    commit_version_bump(
      message: "Version bump for App Store release",
      xcodeproj: WORKSPACE_PATH
    )
    
    # Add git tag
    add_git_tag(
      tag: get_version_number(xcodeproj: WORKSPACE_PATH)
    )
    
    UI.success("‚úÖ App Store upload completed successfully!")
    UI.success("üè∑Ô∏è  Tagged version: #{get_version_number(xcodeproj: WORKSPACE_PATH)}")
  end

  # MARK: - Build Only (for CI validation)

  desc "Build app without distribution (for CI validation)"
  lane :build do
    setup_ci_if_needed
    
    sync_code_signing(type: "development")
    
    build_app(
      scheme: SCHEME_NAME,
      project: WORKSPACE_PATH,
      configuration: "Debug",
      export_method: "development",
      output_directory: "./build/validation",
      output_name: "#{SCHEME_NAME}-validation.ipa",
      clean: true,
      include_bitcode: false,
      skip_profile_detection: true,
      skip_archive: false
    )
    
    UI.success("‚úÖ Build validation completed successfully!")
  end

  # MARK: - Code Signing

  desc "Sync development certificates and provisioning profiles"
  lane :certificates do
    setup_ci_if_needed
    sync_code_signing(type: "development")
    sync_code_signing(type: "appstore")
  end

  desc "Update certificates and push to git"
  lane :update_certificates do
    match(type: "development", force_for_new_devices: true)
    match(type: "appstore")
    UI.success("‚úÖ Certificates updated and pushed to git!")
  end

  # MARK: - Helper Methods

  private_lane :setup_ci_if_needed do
    if is_ci
      setup_ci(
        provider: "github-actions"
      )
    end
  end

  private_lane :sync_code_signing do |options|
    type = options[:type]
    
    match(
      type: type,
      app_identifier: APP_IDENTIFIER,
      git_url: ENV["MATCH_GIT_URL"],
      git_basic_authorization: ENV["MATCH_GIT_BASIC_AUTHORIZATION"],
      keychain_name: is_ci ? "CI" : nil,
      keychain_password: is_ci ? ENV["KEYCHAIN_PASSWORD"] : nil,
      readonly: is_ci
    )
  end

  # MARK: - Utility Lanes

  desc "Show current version and build number"
  lane :version do
    version = get_version_number(xcodeproj: WORKSPACE_PATH)
    build = get_build_number(xcodeproj: WORKSPACE_PATH)
    UI.message("üì± Current version: #{version} (#{build})")
  end

  desc "Show available lanes"
  lane :lanes do
    UI.header("üìã Available Fastlane Lanes")
    UI.message("üî® Development:")
    UI.message("  ‚Ä¢ fastlane dev        - Build development version")
    UI.message("  ‚Ä¢ fastlane build      - Build for CI validation")
    UI.message("")
    UI.message("üß™ Testing:")
    UI.message("  ‚Ä¢ fastlane beta       - Build and upload to TestFlight")
    UI.message("")
    UI.message("üöÄ Production:")
    UI.message("  ‚Ä¢ fastlane release    - Build and upload to App Store")
    UI.message("")
    UI.message("üîê Code Signing:")
    UI.message("  ‚Ä¢ fastlane certificates        - Sync existing certificates")
    UI.message("  ‚Ä¢ fastlane update_certificates - Update and push new certificates")
    UI.message("")
    UI.message("‚ÑπÔ∏è  Utility:")
    UI.message("  ‚Ä¢ fastlane version    - Show current app version")
    UI.message("  ‚Ä¢ fastlane lanes      - Show this help")
  end
end
default_platform(:android)

platform :android do
  desc "Setup signing configuration"
  lane :setup_signing do
    unless File.exist?("../key.properties")
      UI.user_error!("‚ùå Missing key.properties file. Please create it from key.properties.sample and add your keystore information.")
    end
    
    keystore_properties = File.read("../key.properties").split("\n").map { |line| line.split("=") }.to_h
    keystore_file = keystore_properties["storeFile"]
    
    unless keystore_file && File.exist?("../../#{keystore_file}")
      UI.user_error!("‚ùå Keystore file not found: #{keystore_file}. Please ensure your keystore exists and key.properties is configured correctly.")
    end
    
    UI.success("‚úÖ Signing configuration verified")
  end

  desc "Build App Bundle (AAB)"
  lane :build_aab do |options|
    setup_signing
    flutter_clean
    
    sh(
      "flutter",
      "build",
      "appbundle",
      "--release",
      "--build-number=#{options[:build_number] || ENV['BUILD_NUMBER'] || '1'}",
    )

    sh("mkdir", "-p", "../../output")
    sh("cp", "../../build/app/outputs/bundle/release/app-release.aab", "../../output/thriftwood-android.aab")
    
    UI.success("‚úÖ App Bundle built successfully: output/thriftwood-android.aab")
  end

  desc "Build APK"
  lane :build_apk do |options|
    setup_signing
    flutter_clean
    
    sh(
      "flutter",
      "build",
      "apk",
      "--release",
      "--build-number=#{options[:build_number] || ENV['BUILD_NUMBER'] || '1'}",
    )

    sh("mkdir", "-p", "../../output")
    sh("cp", "../../build/app/outputs/flutter-apk/app-release.apk", "../../output/thriftwood-android.apk")
    
    UI.success("‚úÖ APK built successfully: output/thriftwood-android.apk")
  end

  desc "Build both APK and AAB"
  lane :build_all do |options|
    build_apk(options)
    build_aab(options)
  end

  desc "Deploy to Google Play Store"
  lane :deploy_playstore do |options|
    unless options[:aab] && File.exist?(options[:aab])
      UI.user_error!("‚ùå AAB file required for Play Store deployment. Build with build_aab first.")
    end
    
    upload_to_play_store(
      aab: options[:aab],
      skip_upload_metadata: options[:skip_metadata] || true,
      skip_upload_images: options[:skip_images] || true,
      skip_upload_screenshots: options[:skip_screenshots] || true,
      timeout: 600,
      track: options[:track] || "internal",
      version_name: options[:version_name],
    )
    
    UI.success("‚úÖ Successfully deployed to Google Play Store")
  end

  private_lane :flutter_clean do
    sh("flutter", "clean")
    UI.message("üßπ Flutter clean completed")
  end
end

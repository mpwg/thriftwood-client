//
// RadarrImportListMoviesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class RadarrImportListMoviesAPI {

    /**

     - parameter includeRecommendations: (query)  (optional, default to false)
     - parameter includeTrending: (query)  (optional, default to false)
     - parameter includePopular: (query)  (optional, default to false)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV3ImportlistMovieGet(includeRecommendations: Bool? = nil, includeTrending: Bool? = nil, includePopular: Bool? = nil, apiConfiguration: RadarrAPIAPIConfiguration = RadarrAPIAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await apiV3ImportlistMovieGetWithRequestBuilder(includeRecommendations: includeRecommendations, includeTrending: includeTrending, includePopular: includePopular, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /api/v3/importlist/movie
     - parameter includeRecommendations: (query)  (optional, default to false)
     - parameter includeTrending: (query)  (optional, default to false)
     - parameter includePopular: (query)  (optional, default to false)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func apiV3ImportlistMovieGetWithRequestBuilder(includeRecommendations: Bool? = nil, includeTrending: Bool? = nil, includePopular: Bool? = nil, apiConfiguration: RadarrAPIAPIConfiguration = RadarrAPIAPIConfiguration.shared) -> RequestBuilder<Void> {
        let localVariablePath = "/api/v3/importlist/movie"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "includeRecommendations": (wrappedValue: includeRecommendations?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "includeTrending": (wrappedValue: includeTrending?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "includePopular": (wrappedValue: includePopular?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter movieResource: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV3ImportlistMoviePost(movieResource: [MovieResource]? = nil, apiConfiguration: RadarrAPIAPIConfiguration = RadarrAPIAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await apiV3ImportlistMoviePostWithRequestBuilder(movieResource: movieResource, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /api/v3/importlist/movie
     - parameter movieResource: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func apiV3ImportlistMoviePostWithRequestBuilder(movieResource: [MovieResource]? = nil, apiConfiguration: RadarrAPIAPIConfiguration = RadarrAPIAPIConfiguration.shared) -> RequestBuilder<Void> {
        let localVariablePath = "/api/v3/importlist/movie"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: movieResource, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }
}

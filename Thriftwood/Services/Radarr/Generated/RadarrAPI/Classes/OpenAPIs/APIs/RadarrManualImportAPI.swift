//
// RadarrManualImportAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class RadarrManualImportAPI {

    /**

     - parameter folder: (query)  (optional)
     - parameter downloadId: (query)  (optional)
     - parameter movieId: (query)  (optional)
     - parameter filterExistingFiles: (query)  (optional, default to true)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [ManualImportResource]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV3ManualimportGet(folder: String? = nil, downloadId: String? = nil, movieId: Int? = nil, filterExistingFiles: Bool? = nil, apiConfiguration: RadarrAPIAPIConfiguration = RadarrAPIAPIConfiguration.shared) async throws(ErrorResponse) -> [ManualImportResource] {
        return try await apiV3ManualimportGetWithRequestBuilder(folder: folder, downloadId: downloadId, movieId: movieId, filterExistingFiles: filterExistingFiles, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /api/v3/manualimport
     - parameter folder: (query)  (optional)
     - parameter downloadId: (query)  (optional)
     - parameter movieId: (query)  (optional)
     - parameter filterExistingFiles: (query)  (optional, default to true)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[ManualImportResource]> 
     */
    open class func apiV3ManualimportGetWithRequestBuilder(folder: String? = nil, downloadId: String? = nil, movieId: Int? = nil, filterExistingFiles: Bool? = nil, apiConfiguration: RadarrAPIAPIConfiguration = RadarrAPIAPIConfiguration.shared) -> RequestBuilder<[ManualImportResource]> {
        let localVariablePath = "/api/v3/manualimport"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": (wrappedValue: folder?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "downloadId": (wrappedValue: downloadId?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "movieId": (wrappedValue: movieId?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "filterExistingFiles": (wrappedValue: filterExistingFiles?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[ManualImportResource]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter manualImportReprocessResource: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV3ManualimportPost(manualImportReprocessResource: [ManualImportReprocessResource]? = nil, apiConfiguration: RadarrAPIAPIConfiguration = RadarrAPIAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await apiV3ManualimportPostWithRequestBuilder(manualImportReprocessResource: manualImportReprocessResource, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /api/v3/manualimport
     - parameter manualImportReprocessResource: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func apiV3ManualimportPostWithRequestBuilder(manualImportReprocessResource: [ManualImportReprocessResource]? = nil, apiConfiguration: RadarrAPIAPIConfiguration = RadarrAPIAPIConfiguration.shared) -> RequestBuilder<Void> {
        let localVariablePath = "/api/v3/manualimport"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: manualImportReprocessResource, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }
}

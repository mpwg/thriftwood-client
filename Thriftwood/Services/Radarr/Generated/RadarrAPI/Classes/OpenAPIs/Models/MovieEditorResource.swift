//
// MovieEditorResource.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct MovieEditorResource: Sendable, Codable, ParameterConvertible, Hashable {

    public var movieIds: [Int]?
    public var monitored: Bool?
    public var qualityProfileId: Int?
    public var minimumAvailability: MovieStatusType?
    public var rootFolderPath: String?
    public var tags: [Int]?
    public var applyTags: ApplyTags?
    public var moveFiles: Bool?
    public var deleteFiles: Bool?
    public var addImportExclusion: Bool?

    public init(movieIds: [Int]? = nil, monitored: Bool? = nil, qualityProfileId: Int? = nil, minimumAvailability: MovieStatusType? = nil, rootFolderPath: String? = nil, tags: [Int]? = nil, applyTags: ApplyTags? = nil, moveFiles: Bool? = nil, deleteFiles: Bool? = nil, addImportExclusion: Bool? = nil) {
        self.movieIds = movieIds
        self.monitored = monitored
        self.qualityProfileId = qualityProfileId
        self.minimumAvailability = minimumAvailability
        self.rootFolderPath = rootFolderPath
        self.tags = tags
        self.applyTags = applyTags
        self.moveFiles = moveFiles
        self.deleteFiles = deleteFiles
        self.addImportExclusion = addImportExclusion
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case movieIds
        case monitored
        case qualityProfileId
        case minimumAvailability
        case rootFolderPath
        case tags
        case applyTags
        case moveFiles
        case deleteFiles
        case addImportExclusion
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(movieIds, forKey: .movieIds)
        try container.encodeIfPresent(monitored, forKey: .monitored)
        try container.encodeIfPresent(qualityProfileId, forKey: .qualityProfileId)
        try container.encodeIfPresent(minimumAvailability, forKey: .minimumAvailability)
        try container.encodeIfPresent(rootFolderPath, forKey: .rootFolderPath)
        try container.encodeIfPresent(tags, forKey: .tags)
        try container.encodeIfPresent(applyTags, forKey: .applyTags)
        try container.encodeIfPresent(moveFiles, forKey: .moveFiles)
        try container.encodeIfPresent(deleteFiles, forKey: .deleteFiles)
        try container.encodeIfPresent(addImportExclusion, forKey: .addImportExclusion)
    }
}


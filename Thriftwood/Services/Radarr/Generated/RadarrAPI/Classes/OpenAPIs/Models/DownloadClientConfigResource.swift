//
// DownloadClientConfigResource.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct DownloadClientConfigResource: Sendable, Codable, ParameterConvertible, Hashable {

    public var id: Int?
    public var downloadClientWorkingFolders: String?
    public var enableCompletedDownloadHandling: Bool?
    public var checkForFinishedDownloadInterval: Int?
    public var autoRedownloadFailed: Bool?
    public var autoRedownloadFailedFromInteractiveSearch: Bool?

    public init(id: Int? = nil, downloadClientWorkingFolders: String? = nil, enableCompletedDownloadHandling: Bool? = nil, checkForFinishedDownloadInterval: Int? = nil, autoRedownloadFailed: Bool? = nil, autoRedownloadFailedFromInteractiveSearch: Bool? = nil) {
        self.id = id
        self.downloadClientWorkingFolders = downloadClientWorkingFolders
        self.enableCompletedDownloadHandling = enableCompletedDownloadHandling
        self.checkForFinishedDownloadInterval = checkForFinishedDownloadInterval
        self.autoRedownloadFailed = autoRedownloadFailed
        self.autoRedownloadFailedFromInteractiveSearch = autoRedownloadFailedFromInteractiveSearch
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case downloadClientWorkingFolders
        case enableCompletedDownloadHandling
        case checkForFinishedDownloadInterval
        case autoRedownloadFailed
        case autoRedownloadFailedFromInteractiveSearch
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(downloadClientWorkingFolders, forKey: .downloadClientWorkingFolders)
        try container.encodeIfPresent(enableCompletedDownloadHandling, forKey: .enableCompletedDownloadHandling)
        try container.encodeIfPresent(checkForFinishedDownloadInterval, forKey: .checkForFinishedDownloadInterval)
        try container.encodeIfPresent(autoRedownloadFailed, forKey: .autoRedownloadFailed)
        try container.encodeIfPresent(autoRedownloadFailedFromInteractiveSearch, forKey: .autoRedownloadFailedFromInteractiveSearch)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension DownloadClientConfigResource: Identifiable {}

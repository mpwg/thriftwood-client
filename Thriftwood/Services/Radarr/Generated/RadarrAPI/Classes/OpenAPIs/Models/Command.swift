//
// Command.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct Command: Sendable, Codable, ParameterConvertible, Hashable {

    public var sendUpdatesToClient: Bool?
    public var updateScheduledTask: Bool?
    public var completionMessage: String?
    public var requiresDiskAccess: Bool?
    public var isExclusive: Bool?
    public var isTypeExclusive: Bool?
    public var isLongRunning: Bool?
    public var name: String?
    public var lastExecutionTime: Date?
    public var lastStartTime: Date?
    public var trigger: CommandTrigger?
    public var suppressMessages: Bool?
    public var clientUserAgent: String?

    public init(sendUpdatesToClient: Bool? = nil, updateScheduledTask: Bool? = nil, completionMessage: String? = nil, requiresDiskAccess: Bool? = nil, isExclusive: Bool? = nil, isTypeExclusive: Bool? = nil, isLongRunning: Bool? = nil, name: String? = nil, lastExecutionTime: Date? = nil, lastStartTime: Date? = nil, trigger: CommandTrigger? = nil, suppressMessages: Bool? = nil, clientUserAgent: String? = nil) {
        self.sendUpdatesToClient = sendUpdatesToClient
        self.updateScheduledTask = updateScheduledTask
        self.completionMessage = completionMessage
        self.requiresDiskAccess = requiresDiskAccess
        self.isExclusive = isExclusive
        self.isTypeExclusive = isTypeExclusive
        self.isLongRunning = isLongRunning
        self.name = name
        self.lastExecutionTime = lastExecutionTime
        self.lastStartTime = lastStartTime
        self.trigger = trigger
        self.suppressMessages = suppressMessages
        self.clientUserAgent = clientUserAgent
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case sendUpdatesToClient
        case updateScheduledTask
        case completionMessage
        case requiresDiskAccess
        case isExclusive
        case isTypeExclusive
        case isLongRunning
        case name
        case lastExecutionTime
        case lastStartTime
        case trigger
        case suppressMessages
        case clientUserAgent
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(sendUpdatesToClient, forKey: .sendUpdatesToClient)
        try container.encodeIfPresent(updateScheduledTask, forKey: .updateScheduledTask)
        try container.encodeIfPresent(completionMessage, forKey: .completionMessage)
        try container.encodeIfPresent(requiresDiskAccess, forKey: .requiresDiskAccess)
        try container.encodeIfPresent(isExclusive, forKey: .isExclusive)
        try container.encodeIfPresent(isTypeExclusive, forKey: .isTypeExclusive)
        try container.encodeIfPresent(isLongRunning, forKey: .isLongRunning)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(lastExecutionTime, forKey: .lastExecutionTime)
        try container.encodeIfPresent(lastStartTime, forKey: .lastStartTime)
        try container.encodeIfPresent(trigger, forKey: .trigger)
        try container.encodeIfPresent(suppressMessages, forKey: .suppressMessages)
        try container.encodeIfPresent(clientUserAgent, forKey: .clientUserAgent)
    }
}


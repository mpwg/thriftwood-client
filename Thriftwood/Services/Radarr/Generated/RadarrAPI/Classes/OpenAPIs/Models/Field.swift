//
// Field.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct Field: Sendable, Codable, ParameterConvertible, Hashable {

    public var order: Int?
    public var name: String?
    public var label: String?
    public var unit: String?
    public var helpText: String?
    public var helpTextWarning: String?
    public var helpLink: String?
    public var value: JSONValue?
    public var type: String?
    public var advanced: Bool?
    public var selectOptions: [SelectOption]?
    public var selectOptionsProviderAction: String?
    public var section: String?
    public var hidden: String?
    public var privacy: PrivacyLevel?
    public var placeholder: String?
    public var isFloat: Bool?

    public init(order: Int? = nil, name: String? = nil, label: String? = nil, unit: String? = nil, helpText: String? = nil, helpTextWarning: String? = nil, helpLink: String? = nil, value: JSONValue? = nil, type: String? = nil, advanced: Bool? = nil, selectOptions: [SelectOption]? = nil, selectOptionsProviderAction: String? = nil, section: String? = nil, hidden: String? = nil, privacy: PrivacyLevel? = nil, placeholder: String? = nil, isFloat: Bool? = nil) {
        self.order = order
        self.name = name
        self.label = label
        self.unit = unit
        self.helpText = helpText
        self.helpTextWarning = helpTextWarning
        self.helpLink = helpLink
        self.value = value
        self.type = type
        self.advanced = advanced
        self.selectOptions = selectOptions
        self.selectOptionsProviderAction = selectOptionsProviderAction
        self.section = section
        self.hidden = hidden
        self.privacy = privacy
        self.placeholder = placeholder
        self.isFloat = isFloat
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case order
        case name
        case label
        case unit
        case helpText
        case helpTextWarning
        case helpLink
        case value
        case type
        case advanced
        case selectOptions
        case selectOptionsProviderAction
        case section
        case hidden
        case privacy
        case placeholder
        case isFloat
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(order, forKey: .order)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(label, forKey: .label)
        try container.encodeIfPresent(unit, forKey: .unit)
        try container.encodeIfPresent(helpText, forKey: .helpText)
        try container.encodeIfPresent(helpTextWarning, forKey: .helpTextWarning)
        try container.encodeIfPresent(helpLink, forKey: .helpLink)
        try container.encodeIfPresent(value, forKey: .value)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(advanced, forKey: .advanced)
        try container.encodeIfPresent(selectOptions, forKey: .selectOptions)
        try container.encodeIfPresent(selectOptionsProviderAction, forKey: .selectOptionsProviderAction)
        try container.encodeIfPresent(section, forKey: .section)
        try container.encodeIfPresent(hidden, forKey: .hidden)
        try container.encodeIfPresent(privacy, forKey: .privacy)
        try container.encodeIfPresent(placeholder, forKey: .placeholder)
        try container.encodeIfPresent(isFloat, forKey: .isFloat)
    }
}


//
// LogResource.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct LogResource: Sendable, Codable, ParameterConvertible, Hashable {

    public var id: Int?
    public var time: Date?
    public var exception: String?
    public var exceptionType: String?
    public var level: String?
    public var logger: String?
    public var message: String?
    public var method: String?

    public init(id: Int? = nil, time: Date? = nil, exception: String? = nil, exceptionType: String? = nil, level: String? = nil, logger: String? = nil, message: String? = nil, method: String? = nil) {
        self.id = id
        self.time = time
        self.exception = exception
        self.exceptionType = exceptionType
        self.level = level
        self.logger = logger
        self.message = message
        self.method = method
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case time
        case exception
        case exceptionType
        case level
        case logger
        case message
        case method
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(time, forKey: .time)
        try container.encodeIfPresent(exception, forKey: .exception)
        try container.encodeIfPresent(exceptionType, forKey: .exceptionType)
        try container.encodeIfPresent(level, forKey: .level)
        try container.encodeIfPresent(logger, forKey: .logger)
        try container.encodeIfPresent(message, forKey: .message)
        try container.encodeIfPresent(method, forKey: .method)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension LogResource: Identifiable {}

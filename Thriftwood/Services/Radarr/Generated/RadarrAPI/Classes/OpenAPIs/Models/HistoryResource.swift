//
// HistoryResource.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct HistoryResource: Sendable, Codable, ParameterConvertible, Hashable {

    public var id: Int?
    public var movieId: Int?
    public var sourceTitle: String?
    public var languages: [Language]?
    public var quality: QualityModel?
    public var customFormats: [CustomFormatResource]?
    public var customFormatScore: Int?
    public var qualityCutoffNotMet: Bool?
    public var date: Date?
    public var downloadId: String?
    public var eventType: MovieHistoryEventType?
    public var data: [String: String]?
    public var movie: MovieResource?

    public init(id: Int? = nil, movieId: Int? = nil, sourceTitle: String? = nil, languages: [Language]? = nil, quality: QualityModel? = nil, customFormats: [CustomFormatResource]? = nil, customFormatScore: Int? = nil, qualityCutoffNotMet: Bool? = nil, date: Date? = nil, downloadId: String? = nil, eventType: MovieHistoryEventType? = nil, data: [String: String]? = nil, movie: MovieResource? = nil) {
        self.id = id
        self.movieId = movieId
        self.sourceTitle = sourceTitle
        self.languages = languages
        self.quality = quality
        self.customFormats = customFormats
        self.customFormatScore = customFormatScore
        self.qualityCutoffNotMet = qualityCutoffNotMet
        self.date = date
        self.downloadId = downloadId
        self.eventType = eventType
        self.data = data
        self.movie = movie
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case movieId
        case sourceTitle
        case languages
        case quality
        case customFormats
        case customFormatScore
        case qualityCutoffNotMet
        case date
        case downloadId
        case eventType
        case data
        case movie
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(movieId, forKey: .movieId)
        try container.encodeIfPresent(sourceTitle, forKey: .sourceTitle)
        try container.encodeIfPresent(languages, forKey: .languages)
        try container.encodeIfPresent(quality, forKey: .quality)
        try container.encodeIfPresent(customFormats, forKey: .customFormats)
        try container.encodeIfPresent(customFormatScore, forKey: .customFormatScore)
        try container.encodeIfPresent(qualityCutoffNotMet, forKey: .qualityCutoffNotMet)
        try container.encodeIfPresent(date, forKey: .date)
        try container.encodeIfPresent(downloadId, forKey: .downloadId)
        try container.encodeIfPresent(eventType, forKey: .eventType)
        try container.encodeIfPresent(data, forKey: .data)
        try container.encodeIfPresent(movie, forKey: .movie)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension HistoryResource: Identifiable {}

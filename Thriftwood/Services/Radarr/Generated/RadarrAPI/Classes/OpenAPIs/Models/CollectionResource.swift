//
// CollectionResource.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct CollectionResource: Sendable, Codable, ParameterConvertible, Hashable {

    public static let tagsRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    public var id: Int?
    public var title: String?
    public var sortTitle: String?
    public var tmdbId: Int?
    public var images: [MediaCover]?
    public var overview: String?
    public var monitored: Bool?
    public var rootFolderPath: String?
    public var qualityProfileId: Int?
    public var searchOnAdd: Bool?
    public var minimumAvailability: MovieStatusType?
    public var movies: [CollectionMovieResource]?
    public var missingMovies: Int?
    public var tags: Set<Int>?

    public init(id: Int? = nil, title: String? = nil, sortTitle: String? = nil, tmdbId: Int? = nil, images: [MediaCover]? = nil, overview: String? = nil, monitored: Bool? = nil, rootFolderPath: String? = nil, qualityProfileId: Int? = nil, searchOnAdd: Bool? = nil, minimumAvailability: MovieStatusType? = nil, movies: [CollectionMovieResource]? = nil, missingMovies: Int? = nil, tags: Set<Int>? = nil) {
        self.id = id
        self.title = title
        self.sortTitle = sortTitle
        self.tmdbId = tmdbId
        self.images = images
        self.overview = overview
        self.monitored = monitored
        self.rootFolderPath = rootFolderPath
        self.qualityProfileId = qualityProfileId
        self.searchOnAdd = searchOnAdd
        self.minimumAvailability = minimumAvailability
        self.movies = movies
        self.missingMovies = missingMovies
        self.tags = tags
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case title
        case sortTitle
        case tmdbId
        case images
        case overview
        case monitored
        case rootFolderPath
        case qualityProfileId
        case searchOnAdd
        case minimumAvailability
        case movies
        case missingMovies
        case tags
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(sortTitle, forKey: .sortTitle)
        try container.encodeIfPresent(tmdbId, forKey: .tmdbId)
        try container.encodeIfPresent(images, forKey: .images)
        try container.encodeIfPresent(overview, forKey: .overview)
        try container.encodeIfPresent(monitored, forKey: .monitored)
        try container.encodeIfPresent(rootFolderPath, forKey: .rootFolderPath)
        try container.encodeIfPresent(qualityProfileId, forKey: .qualityProfileId)
        try container.encodeIfPresent(searchOnAdd, forKey: .searchOnAdd)
        try container.encodeIfPresent(minimumAvailability, forKey: .minimumAvailability)
        try container.encodeIfPresent(movies, forKey: .movies)
        try container.encodeIfPresent(missingMovies, forKey: .missingMovies)
        try container.encodeIfPresent(tags, forKey: .tags)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension CollectionResource: Identifiable {}

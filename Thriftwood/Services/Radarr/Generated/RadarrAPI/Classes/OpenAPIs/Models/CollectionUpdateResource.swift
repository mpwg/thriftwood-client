//
// CollectionUpdateResource.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct CollectionUpdateResource: Sendable, Codable, ParameterConvertible, Hashable {

    public var collectionIds: [Int]?
    public var monitored: Bool?
    public var monitorMovies: Bool?
    public var searchOnAdd: Bool?
    public var qualityProfileId: Int?
    public var rootFolderPath: String?
    public var minimumAvailability: MovieStatusType?

    public init(collectionIds: [Int]? = nil, monitored: Bool? = nil, monitorMovies: Bool? = nil, searchOnAdd: Bool? = nil, qualityProfileId: Int? = nil, rootFolderPath: String? = nil, minimumAvailability: MovieStatusType? = nil) {
        self.collectionIds = collectionIds
        self.monitored = monitored
        self.monitorMovies = monitorMovies
        self.searchOnAdd = searchOnAdd
        self.qualityProfileId = qualityProfileId
        self.rootFolderPath = rootFolderPath
        self.minimumAvailability = minimumAvailability
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case collectionIds
        case monitored
        case monitorMovies
        case searchOnAdd
        case qualityProfileId
        case rootFolderPath
        case minimumAvailability
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(collectionIds, forKey: .collectionIds)
        try container.encodeIfPresent(monitored, forKey: .monitored)
        try container.encodeIfPresent(monitorMovies, forKey: .monitorMovies)
        try container.encodeIfPresent(searchOnAdd, forKey: .searchOnAdd)
        try container.encodeIfPresent(qualityProfileId, forKey: .qualityProfileId)
        try container.encodeIfPresent(rootFolderPath, forKey: .rootFolderPath)
        try container.encodeIfPresent(minimumAvailability, forKey: .minimumAvailability)
    }
}


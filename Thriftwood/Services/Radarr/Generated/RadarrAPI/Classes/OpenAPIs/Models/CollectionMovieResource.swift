//
// CollectionMovieResource.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct CollectionMovieResource: Sendable, Codable, ParameterConvertible, Hashable {

    public var tmdbId: Int?
    public var imdbId: String?
    public var title: String?
    public var cleanTitle: String?
    public var sortTitle: String?
    public var status: MovieStatusType?
    public var overview: String?
    public var runtime: Int?
    public var images: [MediaCover]?
    public var year: Int?
    public var ratings: Ratings?
    public var genres: [String]?
    public var folder: String?
    public var isExisting: Bool?
    public var isExcluded: Bool?

    public init(tmdbId: Int? = nil, imdbId: String? = nil, title: String? = nil, cleanTitle: String? = nil, sortTitle: String? = nil, status: MovieStatusType? = nil, overview: String? = nil, runtime: Int? = nil, images: [MediaCover]? = nil, year: Int? = nil, ratings: Ratings? = nil, genres: [String]? = nil, folder: String? = nil, isExisting: Bool? = nil, isExcluded: Bool? = nil) {
        self.tmdbId = tmdbId
        self.imdbId = imdbId
        self.title = title
        self.cleanTitle = cleanTitle
        self.sortTitle = sortTitle
        self.status = status
        self.overview = overview
        self.runtime = runtime
        self.images = images
        self.year = year
        self.ratings = ratings
        self.genres = genres
        self.folder = folder
        self.isExisting = isExisting
        self.isExcluded = isExcluded
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case tmdbId
        case imdbId
        case title
        case cleanTitle
        case sortTitle
        case status
        case overview
        case runtime
        case images
        case year
        case ratings
        case genres
        case folder
        case isExisting
        case isExcluded
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(tmdbId, forKey: .tmdbId)
        try container.encodeIfPresent(imdbId, forKey: .imdbId)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(cleanTitle, forKey: .cleanTitle)
        try container.encodeIfPresent(sortTitle, forKey: .sortTitle)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(overview, forKey: .overview)
        try container.encodeIfPresent(runtime, forKey: .runtime)
        try container.encodeIfPresent(images, forKey: .images)
        try container.encodeIfPresent(year, forKey: .year)
        try container.encodeIfPresent(ratings, forKey: .ratings)
        try container.encodeIfPresent(genres, forKey: .genres)
        try container.encodeIfPresent(folder, forKey: .folder)
        try container.encodeIfPresent(isExisting, forKey: .isExisting)
        try container.encodeIfPresent(isExcluded, forKey: .isExcluded)
    }
}


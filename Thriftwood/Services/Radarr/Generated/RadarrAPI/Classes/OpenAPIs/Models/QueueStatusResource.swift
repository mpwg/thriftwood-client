//
// QueueStatusResource.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct QueueStatusResource: Sendable, Codable, ParameterConvertible, Hashable {

    public var id: Int?
    public var totalCount: Int?
    public var count: Int?
    public var unknownCount: Int?
    public var errors: Bool?
    public var warnings: Bool?
    public var unknownErrors: Bool?
    public var unknownWarnings: Bool?

    public init(id: Int? = nil, totalCount: Int? = nil, count: Int? = nil, unknownCount: Int? = nil, errors: Bool? = nil, warnings: Bool? = nil, unknownErrors: Bool? = nil, unknownWarnings: Bool? = nil) {
        self.id = id
        self.totalCount = totalCount
        self.count = count
        self.unknownCount = unknownCount
        self.errors = errors
        self.warnings = warnings
        self.unknownErrors = unknownErrors
        self.unknownWarnings = unknownWarnings
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case totalCount
        case count
        case unknownCount
        case errors
        case warnings
        case unknownErrors
        case unknownWarnings
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(totalCount, forKey: .totalCount)
        try container.encodeIfPresent(count, forKey: .count)
        try container.encodeIfPresent(unknownCount, forKey: .unknownCount)
        try container.encodeIfPresent(errors, forKey: .errors)
        try container.encodeIfPresent(warnings, forKey: .warnings)
        try container.encodeIfPresent(unknownErrors, forKey: .unknownErrors)
        try container.encodeIfPresent(unknownWarnings, forKey: .unknownWarnings)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension QueueStatusResource: Identifiable {}

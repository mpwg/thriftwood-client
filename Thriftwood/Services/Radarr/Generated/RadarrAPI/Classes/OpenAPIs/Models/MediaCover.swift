//
// MediaCover.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct MediaCover: Sendable, Codable, ParameterConvertible, Hashable {

    public var coverType: MediaCoverTypes?
    public var url: String?
    public var remoteUrl: String?

    public init(coverType: MediaCoverTypes? = nil, url: String? = nil, remoteUrl: String? = nil) {
        self.coverType = coverType
        self.url = url
        self.remoteUrl = remoteUrl
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case coverType
        case url
        case remoteUrl
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(coverType, forKey: .coverType)
        try container.encodeIfPresent(url, forKey: .url)
        try container.encodeIfPresent(remoteUrl, forKey: .remoteUrl)
    }
}


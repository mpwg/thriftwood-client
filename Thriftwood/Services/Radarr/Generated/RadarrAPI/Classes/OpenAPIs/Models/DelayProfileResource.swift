//
// DelayProfileResource.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct DelayProfileResource: Sendable, Codable, ParameterConvertible, Hashable {

    public static let tagsRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    public var id: Int?
    public var enableUsenet: Bool?
    public var enableTorrent: Bool?
    public var preferredProtocol: DownloadProtocol?
    public var usenetDelay: Int?
    public var torrentDelay: Int?
    public var bypassIfHighestQuality: Bool?
    public var bypassIfAboveCustomFormatScore: Bool?
    public var minimumCustomFormatScore: Int?
    public var order: Int?
    public var tags: Set<Int>?

    public init(id: Int? = nil, enableUsenet: Bool? = nil, enableTorrent: Bool? = nil, preferredProtocol: DownloadProtocol? = nil, usenetDelay: Int? = nil, torrentDelay: Int? = nil, bypassIfHighestQuality: Bool? = nil, bypassIfAboveCustomFormatScore: Bool? = nil, minimumCustomFormatScore: Int? = nil, order: Int? = nil, tags: Set<Int>? = nil) {
        self.id = id
        self.enableUsenet = enableUsenet
        self.enableTorrent = enableTorrent
        self.preferredProtocol = preferredProtocol
        self.usenetDelay = usenetDelay
        self.torrentDelay = torrentDelay
        self.bypassIfHighestQuality = bypassIfHighestQuality
        self.bypassIfAboveCustomFormatScore = bypassIfAboveCustomFormatScore
        self.minimumCustomFormatScore = minimumCustomFormatScore
        self.order = order
        self.tags = tags
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case enableUsenet
        case enableTorrent
        case preferredProtocol
        case usenetDelay
        case torrentDelay
        case bypassIfHighestQuality
        case bypassIfAboveCustomFormatScore
        case minimumCustomFormatScore
        case order
        case tags
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(enableUsenet, forKey: .enableUsenet)
        try container.encodeIfPresent(enableTorrent, forKey: .enableTorrent)
        try container.encodeIfPresent(preferredProtocol, forKey: .preferredProtocol)
        try container.encodeIfPresent(usenetDelay, forKey: .usenetDelay)
        try container.encodeIfPresent(torrentDelay, forKey: .torrentDelay)
        try container.encodeIfPresent(bypassIfHighestQuality, forKey: .bypassIfHighestQuality)
        try container.encodeIfPresent(bypassIfAboveCustomFormatScore, forKey: .bypassIfAboveCustomFormatScore)
        try container.encodeIfPresent(minimumCustomFormatScore, forKey: .minimumCustomFormatScore)
        try container.encodeIfPresent(order, forKey: .order)
        try container.encodeIfPresent(tags, forKey: .tags)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension DelayProfileResource: Identifiable {}

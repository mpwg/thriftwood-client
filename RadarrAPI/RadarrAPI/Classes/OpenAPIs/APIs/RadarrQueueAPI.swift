//
// RadarrQueueAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class RadarrQueueAPI {

    /**

     - parameter removeFromClient: (query)  (optional, default to true)
     - parameter blocklist: (query)  (optional, default to false)
     - parameter skipRedownload: (query)  (optional, default to false)
     - parameter changeCategory: (query)  (optional, default to false)
     - parameter queueBulkResource: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV3QueueBulkDelete(removeFromClient: Bool? = nil, blocklist: Bool? = nil, skipRedownload: Bool? = nil, changeCategory: Bool? = nil, queueBulkResource: QueueBulkResource? = nil, apiConfiguration: RadarrAPIAPIConfiguration = RadarrAPIAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await apiV3QueueBulkDeleteWithRequestBuilder(removeFromClient: removeFromClient, blocklist: blocklist, skipRedownload: skipRedownload, changeCategory: changeCategory, queueBulkResource: queueBulkResource, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /api/v3/queue/bulk
     - parameter removeFromClient: (query)  (optional, default to true)
     - parameter blocklist: (query)  (optional, default to false)
     - parameter skipRedownload: (query)  (optional, default to false)
     - parameter changeCategory: (query)  (optional, default to false)
     - parameter queueBulkResource: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func apiV3QueueBulkDeleteWithRequestBuilder(removeFromClient: Bool? = nil, blocklist: Bool? = nil, skipRedownload: Bool? = nil, changeCategory: Bool? = nil, queueBulkResource: QueueBulkResource? = nil, apiConfiguration: RadarrAPIAPIConfiguration = RadarrAPIAPIConfiguration.shared) -> RequestBuilder<Void> {
        let localVariablePath = "/api/v3/queue/bulk"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: queueBulkResource, codableHelper: apiConfiguration.codableHelper)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "removeFromClient": (wrappedValue: removeFromClient?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "blocklist": (wrappedValue: blocklist?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "skipRedownload": (wrappedValue: skipRedownload?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "changeCategory": (wrappedValue: changeCategory?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter page: (query)  (optional, default to 1)
     - parameter pageSize: (query)  (optional, default to 10)
     - parameter sortKey: (query)  (optional)
     - parameter sortDirection: (query)  (optional)
     - parameter includeUnknownMovieItems: (query)  (optional, default to false)
     - parameter includeMovie: (query)  (optional, default to false)
     - parameter movieIds: (query)  (optional)
     - parameter _protocol: (query)  (optional)
     - parameter languages: (query)  (optional)
     - parameter quality: (query)  (optional)
     - parameter status: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: QueueResourcePagingResource
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV3QueueGet(page: Int? = nil, pageSize: Int? = nil, sortKey: String? = nil, sortDirection: SortDirection? = nil, includeUnknownMovieItems: Bool? = nil, includeMovie: Bool? = nil, movieIds: [Int]? = nil, _protocol: DownloadProtocol? = nil, languages: [Int]? = nil, quality: [Int]? = nil, status: [QueueStatus]? = nil, apiConfiguration: RadarrAPIAPIConfiguration = RadarrAPIAPIConfiguration.shared) async throws(ErrorResponse) -> QueueResourcePagingResource {
        return try await apiV3QueueGetWithRequestBuilder(page: page, pageSize: pageSize, sortKey: sortKey, sortDirection: sortDirection, includeUnknownMovieItems: includeUnknownMovieItems, includeMovie: includeMovie, movieIds: movieIds, _protocol: _protocol, languages: languages, quality: quality, status: status, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /api/v3/queue
     - parameter page: (query)  (optional, default to 1)
     - parameter pageSize: (query)  (optional, default to 10)
     - parameter sortKey: (query)  (optional)
     - parameter sortDirection: (query)  (optional)
     - parameter includeUnknownMovieItems: (query)  (optional, default to false)
     - parameter includeMovie: (query)  (optional, default to false)
     - parameter movieIds: (query)  (optional)
     - parameter _protocol: (query)  (optional)
     - parameter languages: (query)  (optional)
     - parameter quality: (query)  (optional)
     - parameter status: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<QueueResourcePagingResource> 
     */
    open class func apiV3QueueGetWithRequestBuilder(page: Int? = nil, pageSize: Int? = nil, sortKey: String? = nil, sortDirection: SortDirection? = nil, includeUnknownMovieItems: Bool? = nil, includeMovie: Bool? = nil, movieIds: [Int]? = nil, _protocol: DownloadProtocol? = nil, languages: [Int]? = nil, quality: [Int]? = nil, status: [QueueStatus]? = nil, apiConfiguration: RadarrAPIAPIConfiguration = RadarrAPIAPIConfiguration.shared) -> RequestBuilder<QueueResourcePagingResource> {
        let localVariablePath = "/api/v3/queue"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "pageSize": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "sortKey": (wrappedValue: sortKey?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "sortDirection": (wrappedValue: sortDirection?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "includeUnknownMovieItems": (wrappedValue: includeUnknownMovieItems?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "includeMovie": (wrappedValue: includeMovie?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "movieIds": (wrappedValue: movieIds?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "protocol": (wrappedValue: _protocol?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "languages": (wrappedValue: languages?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "quality": (wrappedValue: quality?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "status": (wrappedValue: status?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<QueueResourcePagingResource>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path)  
     - parameter removeFromClient: (query)  (optional, default to true)
     - parameter blocklist: (query)  (optional, default to false)
     - parameter skipRedownload: (query)  (optional, default to false)
     - parameter changeCategory: (query)  (optional, default to false)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV3QueueIdDelete(id: Int, removeFromClient: Bool? = nil, blocklist: Bool? = nil, skipRedownload: Bool? = nil, changeCategory: Bool? = nil, apiConfiguration: RadarrAPIAPIConfiguration = RadarrAPIAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await apiV3QueueIdDeleteWithRequestBuilder(id: id, removeFromClient: removeFromClient, blocklist: blocklist, skipRedownload: skipRedownload, changeCategory: changeCategory, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /api/v3/queue/{id}
     - parameter id: (path)  
     - parameter removeFromClient: (query)  (optional, default to true)
     - parameter blocklist: (query)  (optional, default to false)
     - parameter skipRedownload: (query)  (optional, default to false)
     - parameter changeCategory: (query)  (optional, default to false)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func apiV3QueueIdDeleteWithRequestBuilder(id: Int, removeFromClient: Bool? = nil, blocklist: Bool? = nil, skipRedownload: Bool? = nil, changeCategory: Bool? = nil, apiConfiguration: RadarrAPIAPIConfiguration = RadarrAPIAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v3/queue/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "removeFromClient": (wrappedValue: removeFromClient?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "blocklist": (wrappedValue: blocklist?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "skipRedownload": (wrappedValue: skipRedownload?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "changeCategory": (wrappedValue: changeCategory?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }
}

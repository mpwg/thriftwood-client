//
// RadarrImportListAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class RadarrImportListAPI {

    /**

     - parameter name: (path)  
     - parameter importListResource: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV3ImportlistActionNamePost(name: String, importListResource: ImportListResource? = nil, apiConfiguration: RadarrAPIAPIConfiguration = RadarrAPIAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await apiV3ImportlistActionNamePostWithRequestBuilder(name: name, importListResource: importListResource, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /api/v3/importlist/action/{name}
     - parameter name: (path)  
     - parameter importListResource: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func apiV3ImportlistActionNamePostWithRequestBuilder(name: String, importListResource: ImportListResource? = nil, apiConfiguration: RadarrAPIAPIConfiguration = RadarrAPIAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v3/importlist/action/{name}"
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: importListResource, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter importListBulkResource: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV3ImportlistBulkDelete(importListBulkResource: ImportListBulkResource? = nil, apiConfiguration: RadarrAPIAPIConfiguration = RadarrAPIAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await apiV3ImportlistBulkDeleteWithRequestBuilder(importListBulkResource: importListBulkResource, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /api/v3/importlist/bulk
     - parameter importListBulkResource: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func apiV3ImportlistBulkDeleteWithRequestBuilder(importListBulkResource: ImportListBulkResource? = nil, apiConfiguration: RadarrAPIAPIConfiguration = RadarrAPIAPIConfiguration.shared) -> RequestBuilder<Void> {
        let localVariablePath = "/api/v3/importlist/bulk"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: importListBulkResource, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter importListBulkResource: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ImportListResource
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV3ImportlistBulkPut(importListBulkResource: ImportListBulkResource? = nil, apiConfiguration: RadarrAPIAPIConfiguration = RadarrAPIAPIConfiguration.shared) async throws(ErrorResponse) -> ImportListResource {
        return try await apiV3ImportlistBulkPutWithRequestBuilder(importListBulkResource: importListBulkResource, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /api/v3/importlist/bulk
     - parameter importListBulkResource: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ImportListResource> 
     */
    open class func apiV3ImportlistBulkPutWithRequestBuilder(importListBulkResource: ImportListBulkResource? = nil, apiConfiguration: RadarrAPIAPIConfiguration = RadarrAPIAPIConfiguration.shared) -> RequestBuilder<ImportListResource> {
        let localVariablePath = "/api/v3/importlist/bulk"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: importListBulkResource, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ImportListResource>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter apiConfiguration: The configuration for the http request.
     - returns: [ImportListResource]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV3ImportlistGet(apiConfiguration: RadarrAPIAPIConfiguration = RadarrAPIAPIConfiguration.shared) async throws(ErrorResponse) -> [ImportListResource] {
        return try await apiV3ImportlistGetWithRequestBuilder(apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /api/v3/importlist
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[ImportListResource]> 
     */
    open class func apiV3ImportlistGetWithRequestBuilder(apiConfiguration: RadarrAPIAPIConfiguration = RadarrAPIAPIConfiguration.shared) -> RequestBuilder<[ImportListResource]> {
        let localVariablePath = "/api/v3/importlist"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[ImportListResource]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV3ImportlistIdDelete(id: Int, apiConfiguration: RadarrAPIAPIConfiguration = RadarrAPIAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await apiV3ImportlistIdDeleteWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /api/v3/importlist/{id}
     - parameter id: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func apiV3ImportlistIdDeleteWithRequestBuilder(id: Int, apiConfiguration: RadarrAPIAPIConfiguration = RadarrAPIAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v3/importlist/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ImportListResource
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV3ImportlistIdGet(id: Int, apiConfiguration: RadarrAPIAPIConfiguration = RadarrAPIAPIConfiguration.shared) async throws(ErrorResponse) -> ImportListResource {
        return try await apiV3ImportlistIdGetWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /api/v3/importlist/{id}
     - parameter id: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ImportListResource> 
     */
    open class func apiV3ImportlistIdGetWithRequestBuilder(id: Int, apiConfiguration: RadarrAPIAPIConfiguration = RadarrAPIAPIConfiguration.shared) -> RequestBuilder<ImportListResource> {
        var localVariablePath = "/api/v3/importlist/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ImportListResource>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path)  
     - parameter forceSave: (query)  (optional, default to false)
     - parameter importListResource: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ImportListResource
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV3ImportlistIdPut(id: Int, forceSave: Bool? = nil, importListResource: ImportListResource? = nil, apiConfiguration: RadarrAPIAPIConfiguration = RadarrAPIAPIConfiguration.shared) async throws(ErrorResponse) -> ImportListResource {
        return try await apiV3ImportlistIdPutWithRequestBuilder(id: id, forceSave: forceSave, importListResource: importListResource, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /api/v3/importlist/{id}
     - parameter id: (path)  
     - parameter forceSave: (query)  (optional, default to false)
     - parameter importListResource: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ImportListResource> 
     */
    open class func apiV3ImportlistIdPutWithRequestBuilder(id: Int, forceSave: Bool? = nil, importListResource: ImportListResource? = nil, apiConfiguration: RadarrAPIAPIConfiguration = RadarrAPIAPIConfiguration.shared) -> RequestBuilder<ImportListResource> {
        var localVariablePath = "/api/v3/importlist/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: importListResource, codableHelper: apiConfiguration.codableHelper)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "forceSave": (wrappedValue: forceSave?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ImportListResource>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter forceSave: (query)  (optional, default to false)
     - parameter importListResource: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ImportListResource
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV3ImportlistPost(forceSave: Bool? = nil, importListResource: ImportListResource? = nil, apiConfiguration: RadarrAPIAPIConfiguration = RadarrAPIAPIConfiguration.shared) async throws(ErrorResponse) -> ImportListResource {
        return try await apiV3ImportlistPostWithRequestBuilder(forceSave: forceSave, importListResource: importListResource, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /api/v3/importlist
     - parameter forceSave: (query)  (optional, default to false)
     - parameter importListResource: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ImportListResource> 
     */
    open class func apiV3ImportlistPostWithRequestBuilder(forceSave: Bool? = nil, importListResource: ImportListResource? = nil, apiConfiguration: RadarrAPIAPIConfiguration = RadarrAPIAPIConfiguration.shared) -> RequestBuilder<ImportListResource> {
        let localVariablePath = "/api/v3/importlist"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: importListResource, codableHelper: apiConfiguration.codableHelper)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "forceSave": (wrappedValue: forceSave?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ImportListResource>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter apiConfiguration: The configuration for the http request.
     - returns: [ImportListResource]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV3ImportlistSchemaGet(apiConfiguration: RadarrAPIAPIConfiguration = RadarrAPIAPIConfiguration.shared) async throws(ErrorResponse) -> [ImportListResource] {
        return try await apiV3ImportlistSchemaGetWithRequestBuilder(apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /api/v3/importlist/schema
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[ImportListResource]> 
     */
    open class func apiV3ImportlistSchemaGetWithRequestBuilder(apiConfiguration: RadarrAPIAPIConfiguration = RadarrAPIAPIConfiguration.shared) -> RequestBuilder<[ImportListResource]> {
        let localVariablePath = "/api/v3/importlist/schema"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[ImportListResource]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter forceTest: (query)  (optional, default to false)
     - parameter importListResource: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV3ImportlistTestPost(forceTest: Bool? = nil, importListResource: ImportListResource? = nil, apiConfiguration: RadarrAPIAPIConfiguration = RadarrAPIAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await apiV3ImportlistTestPostWithRequestBuilder(forceTest: forceTest, importListResource: importListResource, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /api/v3/importlist/test
     - parameter forceTest: (query)  (optional, default to false)
     - parameter importListResource: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func apiV3ImportlistTestPostWithRequestBuilder(forceTest: Bool? = nil, importListResource: ImportListResource? = nil, apiConfiguration: RadarrAPIAPIConfiguration = RadarrAPIAPIConfiguration.shared) -> RequestBuilder<Void> {
        let localVariablePath = "/api/v3/importlist/test"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: importListResource, codableHelper: apiConfiguration.codableHelper)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "forceTest": (wrappedValue: forceTest?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV3ImportlistTestallPost(apiConfiguration: RadarrAPIAPIConfiguration = RadarrAPIAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await apiV3ImportlistTestallPostWithRequestBuilder(apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /api/v3/importlist/testall
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func apiV3ImportlistTestallPostWithRequestBuilder(apiConfiguration: RadarrAPIAPIConfiguration = RadarrAPIAPIConfiguration.shared) -> RequestBuilder<Void> {
        let localVariablePath = "/api/v3/importlist/testall"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }
}

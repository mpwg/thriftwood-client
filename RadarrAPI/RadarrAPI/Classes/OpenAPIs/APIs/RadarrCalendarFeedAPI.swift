//
// RadarrCalendarFeedAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class RadarrCalendarFeedAPI {

    /**

     - parameter pastDays: (query)  (optional, default to 7)
     - parameter futureDays: (query)  (optional, default to 28)
     - parameter tags: (query)  (optional, default to "")
     - parameter unmonitored: (query)  (optional, default to false)
     - parameter releaseTypes: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func feedV3CalendarRadarrIcsGet(pastDays: Int? = nil, futureDays: Int? = nil, tags: String? = nil, unmonitored: Bool? = nil, releaseTypes: [CalendarReleaseType]? = nil, apiConfiguration: RadarrAPIAPIConfiguration = RadarrAPIAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await feedV3CalendarRadarrIcsGetWithRequestBuilder(pastDays: pastDays, futureDays: futureDays, tags: tags, unmonitored: unmonitored, releaseTypes: releaseTypes, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /feed/v3/calendar/radarr.ics
     - parameter pastDays: (query)  (optional, default to 7)
     - parameter futureDays: (query)  (optional, default to 28)
     - parameter tags: (query)  (optional, default to "")
     - parameter unmonitored: (query)  (optional, default to false)
     - parameter releaseTypes: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func feedV3CalendarRadarrIcsGetWithRequestBuilder(pastDays: Int? = nil, futureDays: Int? = nil, tags: String? = nil, unmonitored: Bool? = nil, releaseTypes: [CalendarReleaseType]? = nil, apiConfiguration: RadarrAPIAPIConfiguration = RadarrAPIAPIConfiguration.shared) -> RequestBuilder<Void> {
        let localVariablePath = "/feed/v3/calendar/radarr.ics"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "pastDays": (wrappedValue: pastDays?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "futureDays": (wrappedValue: futureDays?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "tags": (wrappedValue: tags?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "unmonitored": (wrappedValue: unmonitored?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "releaseTypes": (wrappedValue: releaseTypes?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }
}

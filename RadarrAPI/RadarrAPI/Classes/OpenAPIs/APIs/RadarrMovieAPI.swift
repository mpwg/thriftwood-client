//
// RadarrMovieAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class RadarrMovieAPI {

    /**

     - parameter tmdbId: (query)  (optional)
     - parameter excludeLocalCovers: (query)  (optional, default to false)
     - parameter languageId: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [MovieResource]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV3MovieGet(tmdbId: Int? = nil, excludeLocalCovers: Bool? = nil, languageId: Int? = nil, apiConfiguration: RadarrAPIAPIConfiguration = RadarrAPIAPIConfiguration.shared) async throws(ErrorResponse) -> [MovieResource] {
        return try await apiV3MovieGetWithRequestBuilder(tmdbId: tmdbId, excludeLocalCovers: excludeLocalCovers, languageId: languageId, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /api/v3/movie
     - parameter tmdbId: (query)  (optional)
     - parameter excludeLocalCovers: (query)  (optional, default to false)
     - parameter languageId: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[MovieResource]> 
     */
    open class func apiV3MovieGetWithRequestBuilder(tmdbId: Int? = nil, excludeLocalCovers: Bool? = nil, languageId: Int? = nil, apiConfiguration: RadarrAPIAPIConfiguration = RadarrAPIAPIConfiguration.shared) -> RequestBuilder<[MovieResource]> {
        let localVariablePath = "/api/v3/movie"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tmdbId": (wrappedValue: tmdbId?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "excludeLocalCovers": (wrappedValue: excludeLocalCovers?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "languageId": (wrappedValue: languageId?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[MovieResource]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path)  
     - parameter deleteFiles: (query)  (optional, default to false)
     - parameter addImportExclusion: (query)  (optional, default to false)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV3MovieIdDelete(id: Int, deleteFiles: Bool? = nil, addImportExclusion: Bool? = nil, apiConfiguration: RadarrAPIAPIConfiguration = RadarrAPIAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await apiV3MovieIdDeleteWithRequestBuilder(id: id, deleteFiles: deleteFiles, addImportExclusion: addImportExclusion, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /api/v3/movie/{id}
     - parameter id: (path)  
     - parameter deleteFiles: (query)  (optional, default to false)
     - parameter addImportExclusion: (query)  (optional, default to false)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func apiV3MovieIdDeleteWithRequestBuilder(id: Int, deleteFiles: Bool? = nil, addImportExclusion: Bool? = nil, apiConfiguration: RadarrAPIAPIConfiguration = RadarrAPIAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v3/movie/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "deleteFiles": (wrappedValue: deleteFiles?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "addImportExclusion": (wrappedValue: addImportExclusion?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: MovieResource
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV3MovieIdGet(id: Int, apiConfiguration: RadarrAPIAPIConfiguration = RadarrAPIAPIConfiguration.shared) async throws(ErrorResponse) -> MovieResource {
        return try await apiV3MovieIdGetWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /api/v3/movie/{id}
     - parameter id: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<MovieResource> 
     */
    open class func apiV3MovieIdGetWithRequestBuilder(id: Int, apiConfiguration: RadarrAPIAPIConfiguration = RadarrAPIAPIConfiguration.shared) -> RequestBuilder<MovieResource> {
        var localVariablePath = "/api/v3/movie/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MovieResource>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path)  
     - parameter moveFiles: (query)  (optional, default to false)
     - parameter movieResource: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: MovieResource
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV3MovieIdPut(id: String, moveFiles: Bool? = nil, movieResource: MovieResource? = nil, apiConfiguration: RadarrAPIAPIConfiguration = RadarrAPIAPIConfiguration.shared) async throws(ErrorResponse) -> MovieResource {
        return try await apiV3MovieIdPutWithRequestBuilder(id: id, moveFiles: moveFiles, movieResource: movieResource, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /api/v3/movie/{id}
     - parameter id: (path)  
     - parameter moveFiles: (query)  (optional, default to false)
     - parameter movieResource: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<MovieResource> 
     */
    open class func apiV3MovieIdPutWithRequestBuilder(id: String, moveFiles: Bool? = nil, movieResource: MovieResource? = nil, apiConfiguration: RadarrAPIAPIConfiguration = RadarrAPIAPIConfiguration.shared) -> RequestBuilder<MovieResource> {
        var localVariablePath = "/api/v3/movie/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: movieResource, codableHelper: apiConfiguration.codableHelper)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "moveFiles": (wrappedValue: moveFiles?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MovieResource>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter movieResource: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: MovieResource
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV3MoviePost(movieResource: MovieResource? = nil, apiConfiguration: RadarrAPIAPIConfiguration = RadarrAPIAPIConfiguration.shared) async throws(ErrorResponse) -> MovieResource {
        return try await apiV3MoviePostWithRequestBuilder(movieResource: movieResource, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /api/v3/movie
     - parameter movieResource: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<MovieResource> 
     */
    open class func apiV3MoviePostWithRequestBuilder(movieResource: MovieResource? = nil, apiConfiguration: RadarrAPIAPIConfiguration = RadarrAPIAPIConfiguration.shared) -> RequestBuilder<MovieResource> {
        let localVariablePath = "/api/v3/movie"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: movieResource, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MovieResource>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }
}

//
// RadarrHistoryAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class RadarrHistoryAPI {

    /**

     - parameter id: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV3HistoryFailedIdPost(id: Int, apiConfiguration: RadarrAPIAPIConfiguration = RadarrAPIAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await apiV3HistoryFailedIdPostWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /api/v3/history/failed/{id}
     - parameter id: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func apiV3HistoryFailedIdPostWithRequestBuilder(id: Int, apiConfiguration: RadarrAPIAPIConfiguration = RadarrAPIAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v3/history/failed/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter page: (query)  (optional, default to 1)
     - parameter pageSize: (query)  (optional, default to 10)
     - parameter sortKey: (query)  (optional)
     - parameter sortDirection: (query)  (optional)
     - parameter includeMovie: (query)  (optional)
     - parameter eventType: (query)  (optional)
     - parameter downloadId: (query)  (optional)
     - parameter movieIds: (query)  (optional)
     - parameter languages: (query)  (optional)
     - parameter quality: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: HistoryResourcePagingResource
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV3HistoryGet(page: Int? = nil, pageSize: Int? = nil, sortKey: String? = nil, sortDirection: SortDirection? = nil, includeMovie: Bool? = nil, eventType: [Int]? = nil, downloadId: String? = nil, movieIds: [Int]? = nil, languages: [Int]? = nil, quality: [Int]? = nil, apiConfiguration: RadarrAPIAPIConfiguration = RadarrAPIAPIConfiguration.shared) async throws(ErrorResponse) -> HistoryResourcePagingResource {
        return try await apiV3HistoryGetWithRequestBuilder(page: page, pageSize: pageSize, sortKey: sortKey, sortDirection: sortDirection, includeMovie: includeMovie, eventType: eventType, downloadId: downloadId, movieIds: movieIds, languages: languages, quality: quality, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /api/v3/history
     - parameter page: (query)  (optional, default to 1)
     - parameter pageSize: (query)  (optional, default to 10)
     - parameter sortKey: (query)  (optional)
     - parameter sortDirection: (query)  (optional)
     - parameter includeMovie: (query)  (optional)
     - parameter eventType: (query)  (optional)
     - parameter downloadId: (query)  (optional)
     - parameter movieIds: (query)  (optional)
     - parameter languages: (query)  (optional)
     - parameter quality: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<HistoryResourcePagingResource> 
     */
    open class func apiV3HistoryGetWithRequestBuilder(page: Int? = nil, pageSize: Int? = nil, sortKey: String? = nil, sortDirection: SortDirection? = nil, includeMovie: Bool? = nil, eventType: [Int]? = nil, downloadId: String? = nil, movieIds: [Int]? = nil, languages: [Int]? = nil, quality: [Int]? = nil, apiConfiguration: RadarrAPIAPIConfiguration = RadarrAPIAPIConfiguration.shared) -> RequestBuilder<HistoryResourcePagingResource> {
        let localVariablePath = "/api/v3/history"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "pageSize": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "sortKey": (wrappedValue: sortKey?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "sortDirection": (wrappedValue: sortDirection?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "includeMovie": (wrappedValue: includeMovie?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "eventType": (wrappedValue: eventType?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "downloadId": (wrappedValue: downloadId?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "movieIds": (wrappedValue: movieIds?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "languages": (wrappedValue: languages?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "quality": (wrappedValue: quality?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<HistoryResourcePagingResource>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter movieId: (query)  (optional)
     - parameter eventType: (query)  (optional)
     - parameter includeMovie: (query)  (optional, default to false)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [HistoryResource]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV3HistoryMovieGet(movieId: Int? = nil, eventType: MovieHistoryEventType? = nil, includeMovie: Bool? = nil, apiConfiguration: RadarrAPIAPIConfiguration = RadarrAPIAPIConfiguration.shared) async throws(ErrorResponse) -> [HistoryResource] {
        return try await apiV3HistoryMovieGetWithRequestBuilder(movieId: movieId, eventType: eventType, includeMovie: includeMovie, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /api/v3/history/movie
     - parameter movieId: (query)  (optional)
     - parameter eventType: (query)  (optional)
     - parameter includeMovie: (query)  (optional, default to false)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[HistoryResource]> 
     */
    open class func apiV3HistoryMovieGetWithRequestBuilder(movieId: Int? = nil, eventType: MovieHistoryEventType? = nil, includeMovie: Bool? = nil, apiConfiguration: RadarrAPIAPIConfiguration = RadarrAPIAPIConfiguration.shared) -> RequestBuilder<[HistoryResource]> {
        let localVariablePath = "/api/v3/history/movie"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "movieId": (wrappedValue: movieId?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "eventType": (wrappedValue: eventType?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "includeMovie": (wrappedValue: includeMovie?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[HistoryResource]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter date: (query)  (optional)
     - parameter eventType: (query)  (optional)
     - parameter includeMovie: (query)  (optional, default to false)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [HistoryResource]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV3HistorySinceGet(date: Date? = nil, eventType: MovieHistoryEventType? = nil, includeMovie: Bool? = nil, apiConfiguration: RadarrAPIAPIConfiguration = RadarrAPIAPIConfiguration.shared) async throws(ErrorResponse) -> [HistoryResource] {
        return try await apiV3HistorySinceGetWithRequestBuilder(date: date, eventType: eventType, includeMovie: includeMovie, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /api/v3/history/since
     - parameter date: (query)  (optional)
     - parameter eventType: (query)  (optional)
     - parameter includeMovie: (query)  (optional, default to false)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[HistoryResource]> 
     */
    open class func apiV3HistorySinceGetWithRequestBuilder(date: Date? = nil, eventType: MovieHistoryEventType? = nil, includeMovie: Bool? = nil, apiConfiguration: RadarrAPIAPIConfiguration = RadarrAPIAPIConfiguration.shared) -> RequestBuilder<[HistoryResource]> {
        let localVariablePath = "/api/v3/history/since"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "date": (wrappedValue: date?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "eventType": (wrappedValue: eventType?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "includeMovie": (wrappedValue: includeMovie?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[HistoryResource]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }
}

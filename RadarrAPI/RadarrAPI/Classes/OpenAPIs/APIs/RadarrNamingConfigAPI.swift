//
// RadarrNamingConfigAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class RadarrNamingConfigAPI {

    /**

     - parameter renameMovies: (query)  (optional)
     - parameter replaceIllegalCharacters: (query)  (optional)
     - parameter colonReplacementFormat: (query)  (optional)
     - parameter standardMovieFormat: (query)  (optional)
     - parameter movieFolderFormat: (query)  (optional)
     - parameter id: (query)  (optional)
     - parameter resourceName: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV3ConfigNamingExamplesGet(renameMovies: Bool? = nil, replaceIllegalCharacters: Bool? = nil, colonReplacementFormat: ColonReplacementFormat? = nil, standardMovieFormat: String? = nil, movieFolderFormat: String? = nil, id: Int? = nil, resourceName: String? = nil, apiConfiguration: RadarrAPIAPIConfiguration = RadarrAPIAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await apiV3ConfigNamingExamplesGetWithRequestBuilder(renameMovies: renameMovies, replaceIllegalCharacters: replaceIllegalCharacters, colonReplacementFormat: colonReplacementFormat, standardMovieFormat: standardMovieFormat, movieFolderFormat: movieFolderFormat, id: id, resourceName: resourceName, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /api/v3/config/naming/examples
     - parameter renameMovies: (query)  (optional)
     - parameter replaceIllegalCharacters: (query)  (optional)
     - parameter colonReplacementFormat: (query)  (optional)
     - parameter standardMovieFormat: (query)  (optional)
     - parameter movieFolderFormat: (query)  (optional)
     - parameter id: (query)  (optional)
     - parameter resourceName: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func apiV3ConfigNamingExamplesGetWithRequestBuilder(renameMovies: Bool? = nil, replaceIllegalCharacters: Bool? = nil, colonReplacementFormat: ColonReplacementFormat? = nil, standardMovieFormat: String? = nil, movieFolderFormat: String? = nil, id: Int? = nil, resourceName: String? = nil, apiConfiguration: RadarrAPIAPIConfiguration = RadarrAPIAPIConfiguration.shared) -> RequestBuilder<Void> {
        let localVariablePath = "/api/v3/config/naming/examples"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "renameMovies": (wrappedValue: renameMovies?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "replaceIllegalCharacters": (wrappedValue: replaceIllegalCharacters?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "colonReplacementFormat": (wrappedValue: colonReplacementFormat?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "standardMovieFormat": (wrappedValue: standardMovieFormat?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "movieFolderFormat": (wrappedValue: movieFolderFormat?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "id": (wrappedValue: id?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "resourceName": (wrappedValue: resourceName?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter apiConfiguration: The configuration for the http request.
     - returns: NamingConfigResource
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV3ConfigNamingGet(apiConfiguration: RadarrAPIAPIConfiguration = RadarrAPIAPIConfiguration.shared) async throws(ErrorResponse) -> NamingConfigResource {
        return try await apiV3ConfigNamingGetWithRequestBuilder(apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /api/v3/config/naming
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<NamingConfigResource> 
     */
    open class func apiV3ConfigNamingGetWithRequestBuilder(apiConfiguration: RadarrAPIAPIConfiguration = RadarrAPIAPIConfiguration.shared) -> RequestBuilder<NamingConfigResource> {
        let localVariablePath = "/api/v3/config/naming"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NamingConfigResource>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: NamingConfigResource
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV3ConfigNamingIdGet(id: Int, apiConfiguration: RadarrAPIAPIConfiguration = RadarrAPIAPIConfiguration.shared) async throws(ErrorResponse) -> NamingConfigResource {
        return try await apiV3ConfigNamingIdGetWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /api/v3/config/naming/{id}
     - parameter id: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<NamingConfigResource> 
     */
    open class func apiV3ConfigNamingIdGetWithRequestBuilder(id: Int, apiConfiguration: RadarrAPIAPIConfiguration = RadarrAPIAPIConfiguration.shared) -> RequestBuilder<NamingConfigResource> {
        var localVariablePath = "/api/v3/config/naming/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NamingConfigResource>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path)  
     - parameter namingConfigResource: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: NamingConfigResource
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV3ConfigNamingIdPut(id: String, namingConfigResource: NamingConfigResource? = nil, apiConfiguration: RadarrAPIAPIConfiguration = RadarrAPIAPIConfiguration.shared) async throws(ErrorResponse) -> NamingConfigResource {
        return try await apiV3ConfigNamingIdPutWithRequestBuilder(id: id, namingConfigResource: namingConfigResource, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /api/v3/config/naming/{id}
     - parameter id: (path)  
     - parameter namingConfigResource: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<NamingConfigResource> 
     */
    open class func apiV3ConfigNamingIdPutWithRequestBuilder(id: String, namingConfigResource: NamingConfigResource? = nil, apiConfiguration: RadarrAPIAPIConfiguration = RadarrAPIAPIConfiguration.shared) -> RequestBuilder<NamingConfigResource> {
        var localVariablePath = "/api/v3/config/naming/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: namingConfigResource, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NamingConfigResource>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }
}

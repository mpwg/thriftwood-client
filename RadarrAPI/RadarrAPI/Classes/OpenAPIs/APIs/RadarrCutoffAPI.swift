//
// RadarrCutoffAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class RadarrCutoffAPI {

    /**

     - parameter page: (query)  (optional, default to 1)
     - parameter pageSize: (query)  (optional, default to 10)
     - parameter sortKey: (query)  (optional)
     - parameter sortDirection: (query)  (optional)
     - parameter monitored: (query)  (optional, default to true)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: MovieResourcePagingResource
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV3WantedCutoffGet(page: Int? = nil, pageSize: Int? = nil, sortKey: String? = nil, sortDirection: SortDirection? = nil, monitored: Bool? = nil, apiConfiguration: RadarrAPIAPIConfiguration = RadarrAPIAPIConfiguration.shared) async throws(ErrorResponse) -> MovieResourcePagingResource {
        return try await apiV3WantedCutoffGetWithRequestBuilder(page: page, pageSize: pageSize, sortKey: sortKey, sortDirection: sortDirection, monitored: monitored, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /api/v3/wanted/cutoff
     - parameter page: (query)  (optional, default to 1)
     - parameter pageSize: (query)  (optional, default to 10)
     - parameter sortKey: (query)  (optional)
     - parameter sortDirection: (query)  (optional)
     - parameter monitored: (query)  (optional, default to true)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<MovieResourcePagingResource> 
     */
    open class func apiV3WantedCutoffGetWithRequestBuilder(page: Int? = nil, pageSize: Int? = nil, sortKey: String? = nil, sortDirection: SortDirection? = nil, monitored: Bool? = nil, apiConfiguration: RadarrAPIAPIConfiguration = RadarrAPIAPIConfiguration.shared) -> RequestBuilder<MovieResourcePagingResource> {
        let localVariablePath = "/api/v3/wanted/cutoff"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "pageSize": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "sortKey": (wrappedValue: sortKey?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "sortDirection": (wrappedValue: sortDirection?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "monitored": (wrappedValue: monitored?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MovieResourcePagingResource>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }
}

//
// ImportListBulkResource.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct ImportListBulkResource: Sendable, Codable, ParameterConvertible, Hashable {

    public var ids: [Int]?
    public var tags: [Int]?
    public var applyTags: ApplyTags?
    public var enabled: Bool?
    public var enableAuto: Bool?
    public var rootFolderPath: String?
    public var qualityProfileId: Int?
    public var minimumAvailability: MovieStatusType?

    public init(ids: [Int]? = nil, tags: [Int]? = nil, applyTags: ApplyTags? = nil, enabled: Bool? = nil, enableAuto: Bool? = nil, rootFolderPath: String? = nil, qualityProfileId: Int? = nil, minimumAvailability: MovieStatusType? = nil) {
        self.ids = ids
        self.tags = tags
        self.applyTags = applyTags
        self.enabled = enabled
        self.enableAuto = enableAuto
        self.rootFolderPath = rootFolderPath
        self.qualityProfileId = qualityProfileId
        self.minimumAvailability = minimumAvailability
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case ids
        case tags
        case applyTags
        case enabled
        case enableAuto
        case rootFolderPath
        case qualityProfileId
        case minimumAvailability
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(ids, forKey: .ids)
        try container.encodeIfPresent(tags, forKey: .tags)
        try container.encodeIfPresent(applyTags, forKey: .applyTags)
        try container.encodeIfPresent(enabled, forKey: .enabled)
        try container.encodeIfPresent(enableAuto, forKey: .enableAuto)
        try container.encodeIfPresent(rootFolderPath, forKey: .rootFolderPath)
        try container.encodeIfPresent(qualityProfileId, forKey: .qualityProfileId)
        try container.encodeIfPresent(minimumAvailability, forKey: .minimumAvailability)
    }
}


//
// IndexerConfigResource.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct IndexerConfigResource: Sendable, Codable, ParameterConvertible, Hashable {

    public var id: Int?
    public var minimumAge: Int?
    public var maximumSize: Int?
    public var retention: Int?
    public var rssSyncInterval: Int?
    public var preferIndexerFlags: Bool?
    public var availabilityDelay: Int?
    public var allowHardcodedSubs: Bool?
    public var whitelistedHardcodedSubs: String?

    public init(id: Int? = nil, minimumAge: Int? = nil, maximumSize: Int? = nil, retention: Int? = nil, rssSyncInterval: Int? = nil, preferIndexerFlags: Bool? = nil, availabilityDelay: Int? = nil, allowHardcodedSubs: Bool? = nil, whitelistedHardcodedSubs: String? = nil) {
        self.id = id
        self.minimumAge = minimumAge
        self.maximumSize = maximumSize
        self.retention = retention
        self.rssSyncInterval = rssSyncInterval
        self.preferIndexerFlags = preferIndexerFlags
        self.availabilityDelay = availabilityDelay
        self.allowHardcodedSubs = allowHardcodedSubs
        self.whitelistedHardcodedSubs = whitelistedHardcodedSubs
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case minimumAge
        case maximumSize
        case retention
        case rssSyncInterval
        case preferIndexerFlags
        case availabilityDelay
        case allowHardcodedSubs
        case whitelistedHardcodedSubs
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(minimumAge, forKey: .minimumAge)
        try container.encodeIfPresent(maximumSize, forKey: .maximumSize)
        try container.encodeIfPresent(retention, forKey: .retention)
        try container.encodeIfPresent(rssSyncInterval, forKey: .rssSyncInterval)
        try container.encodeIfPresent(preferIndexerFlags, forKey: .preferIndexerFlags)
        try container.encodeIfPresent(availabilityDelay, forKey: .availabilityDelay)
        try container.encodeIfPresent(allowHardcodedSubs, forKey: .allowHardcodedSubs)
        try container.encodeIfPresent(whitelistedHardcodedSubs, forKey: .whitelistedHardcodedSubs)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension IndexerConfigResource: Identifiable {}

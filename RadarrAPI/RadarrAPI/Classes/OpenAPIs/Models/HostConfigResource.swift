//
// HostConfigResource.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct HostConfigResource: Sendable, Codable, ParameterConvertible, Hashable {

    public var id: Int?
    public var bindAddress: String?
    public var port: Int?
    public var sslPort: Int?
    public var enableSsl: Bool?
    public var launchBrowser: Bool?
    public var authenticationMethod: AuthenticationType?
    public var authenticationRequired: AuthenticationRequiredType?
    public var analyticsEnabled: Bool?
    public var username: String?
    public var password: String?
    public var passwordConfirmation: String?
    public var logLevel: String?
    public var logSizeLimit: Int?
    public var consoleLogLevel: String?
    public var branch: String?
    public var apiKey: String?
    public var sslCertPath: String?
    public var sslCertPassword: String?
    public var urlBase: String?
    public var instanceName: String?
    public var applicationUrl: String?
    public var updateAutomatically: Bool?
    public var updateMechanism: UpdateMechanism?
    public var updateScriptPath: String?
    public var proxyEnabled: Bool?
    public var proxyType: ProxyType?
    public var proxyHostname: String?
    public var proxyPort: Int?
    public var proxyUsername: String?
    public var proxyPassword: String?
    public var proxyBypassFilter: String?
    public var proxyBypassLocalAddresses: Bool?
    public var certificateValidation: CertificateValidationType?
    public var backupFolder: String?
    public var backupInterval: Int?
    public var backupRetention: Int?
    public var trustCgnatIpAddresses: Bool?

    public init(id: Int? = nil, bindAddress: String? = nil, port: Int? = nil, sslPort: Int? = nil, enableSsl: Bool? = nil, launchBrowser: Bool? = nil, authenticationMethod: AuthenticationType? = nil, authenticationRequired: AuthenticationRequiredType? = nil, analyticsEnabled: Bool? = nil, username: String? = nil, password: String? = nil, passwordConfirmation: String? = nil, logLevel: String? = nil, logSizeLimit: Int? = nil, consoleLogLevel: String? = nil, branch: String? = nil, apiKey: String? = nil, sslCertPath: String? = nil, sslCertPassword: String? = nil, urlBase: String? = nil, instanceName: String? = nil, applicationUrl: String? = nil, updateAutomatically: Bool? = nil, updateMechanism: UpdateMechanism? = nil, updateScriptPath: String? = nil, proxyEnabled: Bool? = nil, proxyType: ProxyType? = nil, proxyHostname: String? = nil, proxyPort: Int? = nil, proxyUsername: String? = nil, proxyPassword: String? = nil, proxyBypassFilter: String? = nil, proxyBypassLocalAddresses: Bool? = nil, certificateValidation: CertificateValidationType? = nil, backupFolder: String? = nil, backupInterval: Int? = nil, backupRetention: Int? = nil, trustCgnatIpAddresses: Bool? = nil) {
        self.id = id
        self.bindAddress = bindAddress
        self.port = port
        self.sslPort = sslPort
        self.enableSsl = enableSsl
        self.launchBrowser = launchBrowser
        self.authenticationMethod = authenticationMethod
        self.authenticationRequired = authenticationRequired
        self.analyticsEnabled = analyticsEnabled
        self.username = username
        self.password = password
        self.passwordConfirmation = passwordConfirmation
        self.logLevel = logLevel
        self.logSizeLimit = logSizeLimit
        self.consoleLogLevel = consoleLogLevel
        self.branch = branch
        self.apiKey = apiKey
        self.sslCertPath = sslCertPath
        self.sslCertPassword = sslCertPassword
        self.urlBase = urlBase
        self.instanceName = instanceName
        self.applicationUrl = applicationUrl
        self.updateAutomatically = updateAutomatically
        self.updateMechanism = updateMechanism
        self.updateScriptPath = updateScriptPath
        self.proxyEnabled = proxyEnabled
        self.proxyType = proxyType
        self.proxyHostname = proxyHostname
        self.proxyPort = proxyPort
        self.proxyUsername = proxyUsername
        self.proxyPassword = proxyPassword
        self.proxyBypassFilter = proxyBypassFilter
        self.proxyBypassLocalAddresses = proxyBypassLocalAddresses
        self.certificateValidation = certificateValidation
        self.backupFolder = backupFolder
        self.backupInterval = backupInterval
        self.backupRetention = backupRetention
        self.trustCgnatIpAddresses = trustCgnatIpAddresses
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case bindAddress
        case port
        case sslPort
        case enableSsl
        case launchBrowser
        case authenticationMethod
        case authenticationRequired
        case analyticsEnabled
        case username
        case password
        case passwordConfirmation
        case logLevel
        case logSizeLimit
        case consoleLogLevel
        case branch
        case apiKey
        case sslCertPath
        case sslCertPassword
        case urlBase
        case instanceName
        case applicationUrl
        case updateAutomatically
        case updateMechanism
        case updateScriptPath
        case proxyEnabled
        case proxyType
        case proxyHostname
        case proxyPort
        case proxyUsername
        case proxyPassword
        case proxyBypassFilter
        case proxyBypassLocalAddresses
        case certificateValidation
        case backupFolder
        case backupInterval
        case backupRetention
        case trustCgnatIpAddresses
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(bindAddress, forKey: .bindAddress)
        try container.encodeIfPresent(port, forKey: .port)
        try container.encodeIfPresent(sslPort, forKey: .sslPort)
        try container.encodeIfPresent(enableSsl, forKey: .enableSsl)
        try container.encodeIfPresent(launchBrowser, forKey: .launchBrowser)
        try container.encodeIfPresent(authenticationMethod, forKey: .authenticationMethod)
        try container.encodeIfPresent(authenticationRequired, forKey: .authenticationRequired)
        try container.encodeIfPresent(analyticsEnabled, forKey: .analyticsEnabled)
        try container.encodeIfPresent(username, forKey: .username)
        try container.encodeIfPresent(password, forKey: .password)
        try container.encodeIfPresent(passwordConfirmation, forKey: .passwordConfirmation)
        try container.encodeIfPresent(logLevel, forKey: .logLevel)
        try container.encodeIfPresent(logSizeLimit, forKey: .logSizeLimit)
        try container.encodeIfPresent(consoleLogLevel, forKey: .consoleLogLevel)
        try container.encodeIfPresent(branch, forKey: .branch)
        try container.encodeIfPresent(apiKey, forKey: .apiKey)
        try container.encodeIfPresent(sslCertPath, forKey: .sslCertPath)
        try container.encodeIfPresent(sslCertPassword, forKey: .sslCertPassword)
        try container.encodeIfPresent(urlBase, forKey: .urlBase)
        try container.encodeIfPresent(instanceName, forKey: .instanceName)
        try container.encodeIfPresent(applicationUrl, forKey: .applicationUrl)
        try container.encodeIfPresent(updateAutomatically, forKey: .updateAutomatically)
        try container.encodeIfPresent(updateMechanism, forKey: .updateMechanism)
        try container.encodeIfPresent(updateScriptPath, forKey: .updateScriptPath)
        try container.encodeIfPresent(proxyEnabled, forKey: .proxyEnabled)
        try container.encodeIfPresent(proxyType, forKey: .proxyType)
        try container.encodeIfPresent(proxyHostname, forKey: .proxyHostname)
        try container.encodeIfPresent(proxyPort, forKey: .proxyPort)
        try container.encodeIfPresent(proxyUsername, forKey: .proxyUsername)
        try container.encodeIfPresent(proxyPassword, forKey: .proxyPassword)
        try container.encodeIfPresent(proxyBypassFilter, forKey: .proxyBypassFilter)
        try container.encodeIfPresent(proxyBypassLocalAddresses, forKey: .proxyBypassLocalAddresses)
        try container.encodeIfPresent(certificateValidation, forKey: .certificateValidation)
        try container.encodeIfPresent(backupFolder, forKey: .backupFolder)
        try container.encodeIfPresent(backupInterval, forKey: .backupInterval)
        try container.encodeIfPresent(backupRetention, forKey: .backupRetention)
        try container.encodeIfPresent(trustCgnatIpAddresses, forKey: .trustCgnatIpAddresses)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension HostConfigResource: Identifiable {}

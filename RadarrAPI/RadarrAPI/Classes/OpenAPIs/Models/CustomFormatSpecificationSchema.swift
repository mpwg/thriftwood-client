//
// CustomFormatSpecificationSchema.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct CustomFormatSpecificationSchema: Sendable, Codable, ParameterConvertible, Hashable {

    public var id: Int?
    public var name: String?
    public var implementation: String?
    public var implementationName: String?
    public var infoLink: String?
    public var negate: Bool?
    public var _required: Bool?
    public var fields: [Field]?
    public var presets: [CustomFormatSpecificationSchema]?

    public init(id: Int? = nil, name: String? = nil, implementation: String? = nil, implementationName: String? = nil, infoLink: String? = nil, negate: Bool? = nil, _required: Bool? = nil, fields: [Field]? = nil, presets: [CustomFormatSpecificationSchema]? = nil) {
        self.id = id
        self.name = name
        self.implementation = implementation
        self.implementationName = implementationName
        self.infoLink = infoLink
        self.negate = negate
        self._required = _required
        self.fields = fields
        self.presets = presets
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case implementation
        case implementationName
        case infoLink
        case negate
        case _required = "required"
        case fields
        case presets
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(implementation, forKey: .implementation)
        try container.encodeIfPresent(implementationName, forKey: .implementationName)
        try container.encodeIfPresent(infoLink, forKey: .infoLink)
        try container.encodeIfPresent(negate, forKey: .negate)
        try container.encodeIfPresent(_required, forKey: ._required)
        try container.encodeIfPresent(fields, forKey: .fields)
        try container.encodeIfPresent(presets, forKey: .presets)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension CustomFormatSpecificationSchema: Identifiable {}

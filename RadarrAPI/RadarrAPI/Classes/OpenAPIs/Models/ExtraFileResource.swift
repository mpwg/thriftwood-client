//
// ExtraFileResource.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct ExtraFileResource: Sendable, Codable, ParameterConvertible, Hashable {

    public var id: Int?
    public var movieId: Int?
    public var movieFileId: Int?
    public var relativePath: String?
    public var _extension: String?
    public var languageTags: [String]?
    public var title: String?
    public var type: ExtraFileType?

    public init(id: Int? = nil, movieId: Int? = nil, movieFileId: Int? = nil, relativePath: String? = nil, _extension: String? = nil, languageTags: [String]? = nil, title: String? = nil, type: ExtraFileType? = nil) {
        self.id = id
        self.movieId = movieId
        self.movieFileId = movieFileId
        self.relativePath = relativePath
        self._extension = _extension
        self.languageTags = languageTags
        self.title = title
        self.type = type
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case movieId
        case movieFileId
        case relativePath
        case _extension = "extension"
        case languageTags
        case title
        case type
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(movieId, forKey: .movieId)
        try container.encodeIfPresent(movieFileId, forKey: .movieFileId)
        try container.encodeIfPresent(relativePath, forKey: .relativePath)
        try container.encodeIfPresent(_extension, forKey: ._extension)
        try container.encodeIfPresent(languageTags, forKey: .languageTags)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(type, forKey: .type)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension ExtraFileResource: Identifiable {}

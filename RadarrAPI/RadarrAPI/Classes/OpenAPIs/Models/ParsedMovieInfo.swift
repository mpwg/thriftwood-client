//
// ParsedMovieInfo.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct ParsedMovieInfo: Sendable, Codable, ParameterConvertible, Hashable {

    public var movieTitles: [String]?
    public var originalTitle: String?
    public var releaseTitle: String?
    public var simpleReleaseTitle: String?
    public var quality: QualityModel?
    public var languages: [Language]?
    public var releaseGroup: String?
    public var releaseHash: String?
    public var edition: String?
    public var year: Int?
    public var imdbId: String?
    public var tmdbId: Int?
    public var hardcodedSubs: String?
    public var movieTitle: String?
    public var primaryMovieTitle: String?

    public init(movieTitles: [String]? = nil, originalTitle: String? = nil, releaseTitle: String? = nil, simpleReleaseTitle: String? = nil, quality: QualityModel? = nil, languages: [Language]? = nil, releaseGroup: String? = nil, releaseHash: String? = nil, edition: String? = nil, year: Int? = nil, imdbId: String? = nil, tmdbId: Int? = nil, hardcodedSubs: String? = nil, movieTitle: String? = nil, primaryMovieTitle: String? = nil) {
        self.movieTitles = movieTitles
        self.originalTitle = originalTitle
        self.releaseTitle = releaseTitle
        self.simpleReleaseTitle = simpleReleaseTitle
        self.quality = quality
        self.languages = languages
        self.releaseGroup = releaseGroup
        self.releaseHash = releaseHash
        self.edition = edition
        self.year = year
        self.imdbId = imdbId
        self.tmdbId = tmdbId
        self.hardcodedSubs = hardcodedSubs
        self.movieTitle = movieTitle
        self.primaryMovieTitle = primaryMovieTitle
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case movieTitles
        case originalTitle
        case releaseTitle
        case simpleReleaseTitle
        case quality
        case languages
        case releaseGroup
        case releaseHash
        case edition
        case year
        case imdbId
        case tmdbId
        case hardcodedSubs
        case movieTitle
        case primaryMovieTitle
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(movieTitles, forKey: .movieTitles)
        try container.encodeIfPresent(originalTitle, forKey: .originalTitle)
        try container.encodeIfPresent(releaseTitle, forKey: .releaseTitle)
        try container.encodeIfPresent(simpleReleaseTitle, forKey: .simpleReleaseTitle)
        try container.encodeIfPresent(quality, forKey: .quality)
        try container.encodeIfPresent(languages, forKey: .languages)
        try container.encodeIfPresent(releaseGroup, forKey: .releaseGroup)
        try container.encodeIfPresent(releaseHash, forKey: .releaseHash)
        try container.encodeIfPresent(edition, forKey: .edition)
        try container.encodeIfPresent(year, forKey: .year)
        try container.encodeIfPresent(imdbId, forKey: .imdbId)
        try container.encodeIfPresent(tmdbId, forKey: .tmdbId)
        try container.encodeIfPresent(hardcodedSubs, forKey: .hardcodedSubs)
        try container.encodeIfPresent(movieTitle, forKey: .movieTitle)
        try container.encodeIfPresent(primaryMovieTitle, forKey: .primaryMovieTitle)
    }
}


//
// IndexerResource.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct IndexerResource: Sendable, Codable, ParameterConvertible, Hashable {

    public static let tagsRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    public var id: Int?
    public var name: String?
    public var fields: [Field]?
    public var implementationName: String?
    public var implementation: String?
    public var configContract: String?
    public var infoLink: String?
    public var message: ProviderMessage?
    public var tags: Set<Int>?
    public var presets: [IndexerResource]?
    public var enableRss: Bool?
    public var enableAutomaticSearch: Bool?
    public var enableInteractiveSearch: Bool?
    public var supportsRss: Bool?
    public var supportsSearch: Bool?
    public var _protocol: DownloadProtocol?
    public var priority: Int?
    public var downloadClientId: Int?

    public init(id: Int? = nil, name: String? = nil, fields: [Field]? = nil, implementationName: String? = nil, implementation: String? = nil, configContract: String? = nil, infoLink: String? = nil, message: ProviderMessage? = nil, tags: Set<Int>? = nil, presets: [IndexerResource]? = nil, enableRss: Bool? = nil, enableAutomaticSearch: Bool? = nil, enableInteractiveSearch: Bool? = nil, supportsRss: Bool? = nil, supportsSearch: Bool? = nil, _protocol: DownloadProtocol? = nil, priority: Int? = nil, downloadClientId: Int? = nil) {
        self.id = id
        self.name = name
        self.fields = fields
        self.implementationName = implementationName
        self.implementation = implementation
        self.configContract = configContract
        self.infoLink = infoLink
        self.message = message
        self.tags = tags
        self.presets = presets
        self.enableRss = enableRss
        self.enableAutomaticSearch = enableAutomaticSearch
        self.enableInteractiveSearch = enableInteractiveSearch
        self.supportsRss = supportsRss
        self.supportsSearch = supportsSearch
        self._protocol = _protocol
        self.priority = priority
        self.downloadClientId = downloadClientId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case fields
        case implementationName
        case implementation
        case configContract
        case infoLink
        case message
        case tags
        case presets
        case enableRss
        case enableAutomaticSearch
        case enableInteractiveSearch
        case supportsRss
        case supportsSearch
        case _protocol = "protocol"
        case priority
        case downloadClientId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(fields, forKey: .fields)
        try container.encodeIfPresent(implementationName, forKey: .implementationName)
        try container.encodeIfPresent(implementation, forKey: .implementation)
        try container.encodeIfPresent(configContract, forKey: .configContract)
        try container.encodeIfPresent(infoLink, forKey: .infoLink)
        try container.encodeIfPresent(message, forKey: .message)
        try container.encodeIfPresent(tags, forKey: .tags)
        try container.encodeIfPresent(presets, forKey: .presets)
        try container.encodeIfPresent(enableRss, forKey: .enableRss)
        try container.encodeIfPresent(enableAutomaticSearch, forKey: .enableAutomaticSearch)
        try container.encodeIfPresent(enableInteractiveSearch, forKey: .enableInteractiveSearch)
        try container.encodeIfPresent(supportsRss, forKey: .supportsRss)
        try container.encodeIfPresent(supportsSearch, forKey: .supportsSearch)
        try container.encodeIfPresent(_protocol, forKey: ._protocol)
        try container.encodeIfPresent(priority, forKey: .priority)
        try container.encodeIfPresent(downloadClientId, forKey: .downloadClientId)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension IndexerResource: Identifiable {}

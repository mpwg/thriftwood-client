//
// QualityProfileResource.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct QualityProfileResource: Sendable, Codable, ParameterConvertible, Hashable {

    public var id: Int?
    public var name: String?
    public var upgradeAllowed: Bool?
    public var cutoff: Int?
    public var items: [QualityProfileQualityItemResource]?
    public var minFormatScore: Int?
    public var cutoffFormatScore: Int?
    public var minUpgradeFormatScore: Int?
    public var formatItems: [ProfileFormatItemResource]?
    public var language: Language?

    public init(id: Int? = nil, name: String? = nil, upgradeAllowed: Bool? = nil, cutoff: Int? = nil, items: [QualityProfileQualityItemResource]? = nil, minFormatScore: Int? = nil, cutoffFormatScore: Int? = nil, minUpgradeFormatScore: Int? = nil, formatItems: [ProfileFormatItemResource]? = nil, language: Language? = nil) {
        self.id = id
        self.name = name
        self.upgradeAllowed = upgradeAllowed
        self.cutoff = cutoff
        self.items = items
        self.minFormatScore = minFormatScore
        self.cutoffFormatScore = cutoffFormatScore
        self.minUpgradeFormatScore = minUpgradeFormatScore
        self.formatItems = formatItems
        self.language = language
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case upgradeAllowed
        case cutoff
        case items
        case minFormatScore
        case cutoffFormatScore
        case minUpgradeFormatScore
        case formatItems
        case language
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(upgradeAllowed, forKey: .upgradeAllowed)
        try container.encodeIfPresent(cutoff, forKey: .cutoff)
        try container.encodeIfPresent(items, forKey: .items)
        try container.encodeIfPresent(minFormatScore, forKey: .minFormatScore)
        try container.encodeIfPresent(cutoffFormatScore, forKey: .cutoffFormatScore)
        try container.encodeIfPresent(minUpgradeFormatScore, forKey: .minUpgradeFormatScore)
        try container.encodeIfPresent(formatItems, forKey: .formatItems)
        try container.encodeIfPresent(language, forKey: .language)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension QualityProfileResource: Identifiable {}

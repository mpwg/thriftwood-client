//
// SystemResource.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct SystemResource: Sendable, Codable, ParameterConvertible, Hashable {

    public var appName: String?
    public var instanceName: String?
    public var version: String?
    public var buildTime: Date?
    public var isDebug: Bool?
    public var isProduction: Bool?
    public var isAdmin: Bool?
    public var isUserInteractive: Bool?
    public var startupPath: String?
    public var appData: String?
    public var osName: String?
    public var osVersion: String?
    public var isNetCore: Bool?
    public var isLinux: Bool?
    public var isOsx: Bool?
    public var isWindows: Bool?
    public var isDocker: Bool?
    public var mode: RuntimeMode?
    public var branch: String?
    public var databaseType: DatabaseType?
    public var databaseVersion: String?
    public var authentication: AuthenticationType?
    public var migrationVersion: Int?
    public var urlBase: String?
    public var runtimeVersion: String?
    public var runtimeName: String?
    public var startTime: Date?
    public var packageVersion: String?
    public var packageAuthor: String?
    public var packageUpdateMechanism: UpdateMechanism?
    public var packageUpdateMechanismMessage: String?

    public init(appName: String? = nil, instanceName: String? = nil, version: String? = nil, buildTime: Date? = nil, isDebug: Bool? = nil, isProduction: Bool? = nil, isAdmin: Bool? = nil, isUserInteractive: Bool? = nil, startupPath: String? = nil, appData: String? = nil, osName: String? = nil, osVersion: String? = nil, isNetCore: Bool? = nil, isLinux: Bool? = nil, isOsx: Bool? = nil, isWindows: Bool? = nil, isDocker: Bool? = nil, mode: RuntimeMode? = nil, branch: String? = nil, databaseType: DatabaseType? = nil, databaseVersion: String? = nil, authentication: AuthenticationType? = nil, migrationVersion: Int? = nil, urlBase: String? = nil, runtimeVersion: String? = nil, runtimeName: String? = nil, startTime: Date? = nil, packageVersion: String? = nil, packageAuthor: String? = nil, packageUpdateMechanism: UpdateMechanism? = nil, packageUpdateMechanismMessage: String? = nil) {
        self.appName = appName
        self.instanceName = instanceName
        self.version = version
        self.buildTime = buildTime
        self.isDebug = isDebug
        self.isProduction = isProduction
        self.isAdmin = isAdmin
        self.isUserInteractive = isUserInteractive
        self.startupPath = startupPath
        self.appData = appData
        self.osName = osName
        self.osVersion = osVersion
        self.isNetCore = isNetCore
        self.isLinux = isLinux
        self.isOsx = isOsx
        self.isWindows = isWindows
        self.isDocker = isDocker
        self.mode = mode
        self.branch = branch
        self.databaseType = databaseType
        self.databaseVersion = databaseVersion
        self.authentication = authentication
        self.migrationVersion = migrationVersion
        self.urlBase = urlBase
        self.runtimeVersion = runtimeVersion
        self.runtimeName = runtimeName
        self.startTime = startTime
        self.packageVersion = packageVersion
        self.packageAuthor = packageAuthor
        self.packageUpdateMechanism = packageUpdateMechanism
        self.packageUpdateMechanismMessage = packageUpdateMechanismMessage
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case appName
        case instanceName
        case version
        case buildTime
        case isDebug
        case isProduction
        case isAdmin
        case isUserInteractive
        case startupPath
        case appData
        case osName
        case osVersion
        case isNetCore
        case isLinux
        case isOsx
        case isWindows
        case isDocker
        case mode
        case branch
        case databaseType
        case databaseVersion
        case authentication
        case migrationVersion
        case urlBase
        case runtimeVersion
        case runtimeName
        case startTime
        case packageVersion
        case packageAuthor
        case packageUpdateMechanism
        case packageUpdateMechanismMessage
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(appName, forKey: .appName)
        try container.encodeIfPresent(instanceName, forKey: .instanceName)
        try container.encodeIfPresent(version, forKey: .version)
        try container.encodeIfPresent(buildTime, forKey: .buildTime)
        try container.encodeIfPresent(isDebug, forKey: .isDebug)
        try container.encodeIfPresent(isProduction, forKey: .isProduction)
        try container.encodeIfPresent(isAdmin, forKey: .isAdmin)
        try container.encodeIfPresent(isUserInteractive, forKey: .isUserInteractive)
        try container.encodeIfPresent(startupPath, forKey: .startupPath)
        try container.encodeIfPresent(appData, forKey: .appData)
        try container.encodeIfPresent(osName, forKey: .osName)
        try container.encodeIfPresent(osVersion, forKey: .osVersion)
        try container.encodeIfPresent(isNetCore, forKey: .isNetCore)
        try container.encodeIfPresent(isLinux, forKey: .isLinux)
        try container.encodeIfPresent(isOsx, forKey: .isOsx)
        try container.encodeIfPresent(isWindows, forKey: .isWindows)
        try container.encodeIfPresent(isDocker, forKey: .isDocker)
        try container.encodeIfPresent(mode, forKey: .mode)
        try container.encodeIfPresent(branch, forKey: .branch)
        try container.encodeIfPresent(databaseType, forKey: .databaseType)
        try container.encodeIfPresent(databaseVersion, forKey: .databaseVersion)
        try container.encodeIfPresent(authentication, forKey: .authentication)
        try container.encodeIfPresent(migrationVersion, forKey: .migrationVersion)
        try container.encodeIfPresent(urlBase, forKey: .urlBase)
        try container.encodeIfPresent(runtimeVersion, forKey: .runtimeVersion)
        try container.encodeIfPresent(runtimeName, forKey: .runtimeName)
        try container.encodeIfPresent(startTime, forKey: .startTime)
        try container.encodeIfPresent(packageVersion, forKey: .packageVersion)
        try container.encodeIfPresent(packageAuthor, forKey: .packageAuthor)
        try container.encodeIfPresent(packageUpdateMechanism, forKey: .packageUpdateMechanism)
        try container.encodeIfPresent(packageUpdateMechanismMessage, forKey: .packageUpdateMechanismMessage)
    }
}


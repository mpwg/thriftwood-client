//
// MediaManagementConfigResource.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct MediaManagementConfigResource: Sendable, Codable, ParameterConvertible, Hashable {

    public var id: Int?
    public var autoUnmonitorPreviouslyDownloadedMovies: Bool?
    public var recycleBin: String?
    public var recycleBinCleanupDays: Int?
    public var downloadPropersAndRepacks: ProperDownloadTypes?
    public var createEmptyMovieFolders: Bool?
    public var deleteEmptyFolders: Bool?
    public var fileDate: FileDateType?
    public var rescanAfterRefresh: RescanAfterRefreshType?
    public var autoRenameFolders: Bool?
    public var pathsDefaultStatic: Bool?
    public var setPermissionsLinux: Bool?
    public var chmodFolder: String?
    public var chownGroup: String?
    public var skipFreeSpaceCheckWhenImporting: Bool?
    public var minimumFreeSpaceWhenImporting: Int?
    public var copyUsingHardlinks: Bool?
    public var useScriptImport: Bool?
    public var scriptImportPath: String?
    public var importExtraFiles: Bool?
    public var extraFileExtensions: String?
    public var enableMediaInfo: Bool?

    public init(id: Int? = nil, autoUnmonitorPreviouslyDownloadedMovies: Bool? = nil, recycleBin: String? = nil, recycleBinCleanupDays: Int? = nil, downloadPropersAndRepacks: ProperDownloadTypes? = nil, createEmptyMovieFolders: Bool? = nil, deleteEmptyFolders: Bool? = nil, fileDate: FileDateType? = nil, rescanAfterRefresh: RescanAfterRefreshType? = nil, autoRenameFolders: Bool? = nil, pathsDefaultStatic: Bool? = nil, setPermissionsLinux: Bool? = nil, chmodFolder: String? = nil, chownGroup: String? = nil, skipFreeSpaceCheckWhenImporting: Bool? = nil, minimumFreeSpaceWhenImporting: Int? = nil, copyUsingHardlinks: Bool? = nil, useScriptImport: Bool? = nil, scriptImportPath: String? = nil, importExtraFiles: Bool? = nil, extraFileExtensions: String? = nil, enableMediaInfo: Bool? = nil) {
        self.id = id
        self.autoUnmonitorPreviouslyDownloadedMovies = autoUnmonitorPreviouslyDownloadedMovies
        self.recycleBin = recycleBin
        self.recycleBinCleanupDays = recycleBinCleanupDays
        self.downloadPropersAndRepacks = downloadPropersAndRepacks
        self.createEmptyMovieFolders = createEmptyMovieFolders
        self.deleteEmptyFolders = deleteEmptyFolders
        self.fileDate = fileDate
        self.rescanAfterRefresh = rescanAfterRefresh
        self.autoRenameFolders = autoRenameFolders
        self.pathsDefaultStatic = pathsDefaultStatic
        self.setPermissionsLinux = setPermissionsLinux
        self.chmodFolder = chmodFolder
        self.chownGroup = chownGroup
        self.skipFreeSpaceCheckWhenImporting = skipFreeSpaceCheckWhenImporting
        self.minimumFreeSpaceWhenImporting = minimumFreeSpaceWhenImporting
        self.copyUsingHardlinks = copyUsingHardlinks
        self.useScriptImport = useScriptImport
        self.scriptImportPath = scriptImportPath
        self.importExtraFiles = importExtraFiles
        self.extraFileExtensions = extraFileExtensions
        self.enableMediaInfo = enableMediaInfo
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case autoUnmonitorPreviouslyDownloadedMovies
        case recycleBin
        case recycleBinCleanupDays
        case downloadPropersAndRepacks
        case createEmptyMovieFolders
        case deleteEmptyFolders
        case fileDate
        case rescanAfterRefresh
        case autoRenameFolders
        case pathsDefaultStatic
        case setPermissionsLinux
        case chmodFolder
        case chownGroup
        case skipFreeSpaceCheckWhenImporting
        case minimumFreeSpaceWhenImporting
        case copyUsingHardlinks
        case useScriptImport
        case scriptImportPath
        case importExtraFiles
        case extraFileExtensions
        case enableMediaInfo
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(autoUnmonitorPreviouslyDownloadedMovies, forKey: .autoUnmonitorPreviouslyDownloadedMovies)
        try container.encodeIfPresent(recycleBin, forKey: .recycleBin)
        try container.encodeIfPresent(recycleBinCleanupDays, forKey: .recycleBinCleanupDays)
        try container.encodeIfPresent(downloadPropersAndRepacks, forKey: .downloadPropersAndRepacks)
        try container.encodeIfPresent(createEmptyMovieFolders, forKey: .createEmptyMovieFolders)
        try container.encodeIfPresent(deleteEmptyFolders, forKey: .deleteEmptyFolders)
        try container.encodeIfPresent(fileDate, forKey: .fileDate)
        try container.encodeIfPresent(rescanAfterRefresh, forKey: .rescanAfterRefresh)
        try container.encodeIfPresent(autoRenameFolders, forKey: .autoRenameFolders)
        try container.encodeIfPresent(pathsDefaultStatic, forKey: .pathsDefaultStatic)
        try container.encodeIfPresent(setPermissionsLinux, forKey: .setPermissionsLinux)
        try container.encodeIfPresent(chmodFolder, forKey: .chmodFolder)
        try container.encodeIfPresent(chownGroup, forKey: .chownGroup)
        try container.encodeIfPresent(skipFreeSpaceCheckWhenImporting, forKey: .skipFreeSpaceCheckWhenImporting)
        try container.encodeIfPresent(minimumFreeSpaceWhenImporting, forKey: .minimumFreeSpaceWhenImporting)
        try container.encodeIfPresent(copyUsingHardlinks, forKey: .copyUsingHardlinks)
        try container.encodeIfPresent(useScriptImport, forKey: .useScriptImport)
        try container.encodeIfPresent(scriptImportPath, forKey: .scriptImportPath)
        try container.encodeIfPresent(importExtraFiles, forKey: .importExtraFiles)
        try container.encodeIfPresent(extraFileExtensions, forKey: .extraFileExtensions)
        try container.encodeIfPresent(enableMediaInfo, forKey: .enableMediaInfo)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension MediaManagementConfigResource: Identifiable {}

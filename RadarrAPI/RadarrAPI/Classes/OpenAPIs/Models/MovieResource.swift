//
// MovieResource.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct MovieResource: Sendable, Codable, ParameterConvertible, Hashable {

    public static let tagsRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    public var id: Int?
    public var title: String?
    public var originalTitle: String?
    public var originalLanguage: Language?
    public var alternateTitles: [AlternativeTitleResource]?
    public var secondaryYear: Int?
    public var secondaryYearSourceId: Int?
    public var sortTitle: String?
    public var sizeOnDisk: Int64?
    public var status: MovieStatusType?
    public var overview: String?
    public var inCinemas: Date?
    public var physicalRelease: Date?
    public var digitalRelease: Date?
    public var releaseDate: Date?
    public var physicalReleaseNote: String?
    public var images: [MediaCover]?
    public var website: String?
    public var remotePoster: String?
    public var year: Int?
    public var youTubeTrailerId: String?
    public var studio: String?
    public var path: String?
    public var qualityProfileId: Int?
    public var hasFile: Bool?
    public var movieFileId: Int?
    public var monitored: Bool?
    public var minimumAvailability: MovieStatusType?
    public var isAvailable: Bool?
    public var folderName: String?
    public var runtime: Int?
    public var cleanTitle: String?
    public var imdbId: String?
    public var tmdbId: Int?
    public var titleSlug: String?
    public var rootFolderPath: String?
    public var folder: String?
    public var certification: String?
    public var genres: [String]?
    public var keywords: [String]?
    public var tags: Set<Int>?
    public var added: Date?
    public var addOptions: AddMovieOptions?
    public var ratings: Ratings?
    public var movieFile: MovieFileResource?
    public var collection: MovieCollectionResource?
    public var popularity: Float?
    public var lastSearchTime: Date?
    public var statistics: MovieStatisticsResource?

    public init(id: Int? = nil, title: String? = nil, originalTitle: String? = nil, originalLanguage: Language? = nil, alternateTitles: [AlternativeTitleResource]? = nil, secondaryYear: Int? = nil, secondaryYearSourceId: Int? = nil, sortTitle: String? = nil, sizeOnDisk: Int64? = nil, status: MovieStatusType? = nil, overview: String? = nil, inCinemas: Date? = nil, physicalRelease: Date? = nil, digitalRelease: Date? = nil, releaseDate: Date? = nil, physicalReleaseNote: String? = nil, images: [MediaCover]? = nil, website: String? = nil, remotePoster: String? = nil, year: Int? = nil, youTubeTrailerId: String? = nil, studio: String? = nil, path: String? = nil, qualityProfileId: Int? = nil, hasFile: Bool? = nil, movieFileId: Int? = nil, monitored: Bool? = nil, minimumAvailability: MovieStatusType? = nil, isAvailable: Bool? = nil, folderName: String? = nil, runtime: Int? = nil, cleanTitle: String? = nil, imdbId: String? = nil, tmdbId: Int? = nil, titleSlug: String? = nil, rootFolderPath: String? = nil, folder: String? = nil, certification: String? = nil, genres: [String]? = nil, keywords: [String]? = nil, tags: Set<Int>? = nil, added: Date? = nil, addOptions: AddMovieOptions? = nil, ratings: Ratings? = nil, movieFile: MovieFileResource? = nil, collection: MovieCollectionResource? = nil, popularity: Float? = nil, lastSearchTime: Date? = nil, statistics: MovieStatisticsResource? = nil) {
        self.id = id
        self.title = title
        self.originalTitle = originalTitle
        self.originalLanguage = originalLanguage
        self.alternateTitles = alternateTitles
        self.secondaryYear = secondaryYear
        self.secondaryYearSourceId = secondaryYearSourceId
        self.sortTitle = sortTitle
        self.sizeOnDisk = sizeOnDisk
        self.status = status
        self.overview = overview
        self.inCinemas = inCinemas
        self.physicalRelease = physicalRelease
        self.digitalRelease = digitalRelease
        self.releaseDate = releaseDate
        self.physicalReleaseNote = physicalReleaseNote
        self.images = images
        self.website = website
        self.remotePoster = remotePoster
        self.year = year
        self.youTubeTrailerId = youTubeTrailerId
        self.studio = studio
        self.path = path
        self.qualityProfileId = qualityProfileId
        self.hasFile = hasFile
        self.movieFileId = movieFileId
        self.monitored = monitored
        self.minimumAvailability = minimumAvailability
        self.isAvailable = isAvailable
        self.folderName = folderName
        self.runtime = runtime
        self.cleanTitle = cleanTitle
        self.imdbId = imdbId
        self.tmdbId = tmdbId
        self.titleSlug = titleSlug
        self.rootFolderPath = rootFolderPath
        self.folder = folder
        self.certification = certification
        self.genres = genres
        self.keywords = keywords
        self.tags = tags
        self.added = added
        self.addOptions = addOptions
        self.ratings = ratings
        self.movieFile = movieFile
        self.collection = collection
        self.popularity = popularity
        self.lastSearchTime = lastSearchTime
        self.statistics = statistics
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case title
        case originalTitle
        case originalLanguage
        case alternateTitles
        case secondaryYear
        case secondaryYearSourceId
        case sortTitle
        case sizeOnDisk
        case status
        case overview
        case inCinemas
        case physicalRelease
        case digitalRelease
        case releaseDate
        case physicalReleaseNote
        case images
        case website
        case remotePoster
        case year
        case youTubeTrailerId
        case studio
        case path
        case qualityProfileId
        case hasFile
        case movieFileId
        case monitored
        case minimumAvailability
        case isAvailable
        case folderName
        case runtime
        case cleanTitle
        case imdbId
        case tmdbId
        case titleSlug
        case rootFolderPath
        case folder
        case certification
        case genres
        case keywords
        case tags
        case added
        case addOptions
        case ratings
        case movieFile
        case collection
        case popularity
        case lastSearchTime
        case statistics
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(originalTitle, forKey: .originalTitle)
        try container.encodeIfPresent(originalLanguage, forKey: .originalLanguage)
        try container.encodeIfPresent(alternateTitles, forKey: .alternateTitles)
        try container.encodeIfPresent(secondaryYear, forKey: .secondaryYear)
        try container.encodeIfPresent(secondaryYearSourceId, forKey: .secondaryYearSourceId)
        try container.encodeIfPresent(sortTitle, forKey: .sortTitle)
        try container.encodeIfPresent(sizeOnDisk, forKey: .sizeOnDisk)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(overview, forKey: .overview)
        try container.encodeIfPresent(inCinemas, forKey: .inCinemas)
        try container.encodeIfPresent(physicalRelease, forKey: .physicalRelease)
        try container.encodeIfPresent(digitalRelease, forKey: .digitalRelease)
        try container.encodeIfPresent(releaseDate, forKey: .releaseDate)
        try container.encodeIfPresent(physicalReleaseNote, forKey: .physicalReleaseNote)
        try container.encodeIfPresent(images, forKey: .images)
        try container.encodeIfPresent(website, forKey: .website)
        try container.encodeIfPresent(remotePoster, forKey: .remotePoster)
        try container.encodeIfPresent(year, forKey: .year)
        try container.encodeIfPresent(youTubeTrailerId, forKey: .youTubeTrailerId)
        try container.encodeIfPresent(studio, forKey: .studio)
        try container.encodeIfPresent(path, forKey: .path)
        try container.encodeIfPresent(qualityProfileId, forKey: .qualityProfileId)
        try container.encodeIfPresent(hasFile, forKey: .hasFile)
        try container.encodeIfPresent(movieFileId, forKey: .movieFileId)
        try container.encodeIfPresent(monitored, forKey: .monitored)
        try container.encodeIfPresent(minimumAvailability, forKey: .minimumAvailability)
        try container.encodeIfPresent(isAvailable, forKey: .isAvailable)
        try container.encodeIfPresent(folderName, forKey: .folderName)
        try container.encodeIfPresent(runtime, forKey: .runtime)
        try container.encodeIfPresent(cleanTitle, forKey: .cleanTitle)
        try container.encodeIfPresent(imdbId, forKey: .imdbId)
        try container.encodeIfPresent(tmdbId, forKey: .tmdbId)
        try container.encodeIfPresent(titleSlug, forKey: .titleSlug)
        try container.encodeIfPresent(rootFolderPath, forKey: .rootFolderPath)
        try container.encodeIfPresent(folder, forKey: .folder)
        try container.encodeIfPresent(certification, forKey: .certification)
        try container.encodeIfPresent(genres, forKey: .genres)
        try container.encodeIfPresent(keywords, forKey: .keywords)
        try container.encodeIfPresent(tags, forKey: .tags)
        try container.encodeIfPresent(added, forKey: .added)
        try container.encodeIfPresent(addOptions, forKey: .addOptions)
        try container.encodeIfPresent(ratings, forKey: .ratings)
        try container.encodeIfPresent(movieFile, forKey: .movieFile)
        try container.encodeIfPresent(collection, forKey: .collection)
        try container.encodeIfPresent(popularity, forKey: .popularity)
        try container.encodeIfPresent(lastSearchTime, forKey: .lastSearchTime)
        try container.encodeIfPresent(statistics, forKey: .statistics)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension MovieResource: Identifiable {}

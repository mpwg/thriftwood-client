//
// ImportListResource.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct ImportListResource: Sendable, Codable, ParameterConvertible, Hashable {

    public static let tagsRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    public var id: Int?
    public var name: String?
    public var fields: [Field]?
    public var implementationName: String?
    public var implementation: String?
    public var configContract: String?
    public var infoLink: String?
    public var message: ProviderMessage?
    public var tags: Set<Int>?
    public var presets: [ImportListResource]?
    public var enabled: Bool?
    public var enableAuto: Bool?
    public var monitor: MonitorTypes?
    public var rootFolderPath: String?
    public var qualityProfileId: Int?
    public var searchOnAdd: Bool?
    public var minimumAvailability: MovieStatusType?
    public var listType: ImportListType?
    public var listOrder: Int?
    public var minRefreshInterval: String?

    public init(id: Int? = nil, name: String? = nil, fields: [Field]? = nil, implementationName: String? = nil, implementation: String? = nil, configContract: String? = nil, infoLink: String? = nil, message: ProviderMessage? = nil, tags: Set<Int>? = nil, presets: [ImportListResource]? = nil, enabled: Bool? = nil, enableAuto: Bool? = nil, monitor: MonitorTypes? = nil, rootFolderPath: String? = nil, qualityProfileId: Int? = nil, searchOnAdd: Bool? = nil, minimumAvailability: MovieStatusType? = nil, listType: ImportListType? = nil, listOrder: Int? = nil, minRefreshInterval: String? = nil) {
        self.id = id
        self.name = name
        self.fields = fields
        self.implementationName = implementationName
        self.implementation = implementation
        self.configContract = configContract
        self.infoLink = infoLink
        self.message = message
        self.tags = tags
        self.presets = presets
        self.enabled = enabled
        self.enableAuto = enableAuto
        self.monitor = monitor
        self.rootFolderPath = rootFolderPath
        self.qualityProfileId = qualityProfileId
        self.searchOnAdd = searchOnAdd
        self.minimumAvailability = minimumAvailability
        self.listType = listType
        self.listOrder = listOrder
        self.minRefreshInterval = minRefreshInterval
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case fields
        case implementationName
        case implementation
        case configContract
        case infoLink
        case message
        case tags
        case presets
        case enabled
        case enableAuto
        case monitor
        case rootFolderPath
        case qualityProfileId
        case searchOnAdd
        case minimumAvailability
        case listType
        case listOrder
        case minRefreshInterval
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(fields, forKey: .fields)
        try container.encodeIfPresent(implementationName, forKey: .implementationName)
        try container.encodeIfPresent(implementation, forKey: .implementation)
        try container.encodeIfPresent(configContract, forKey: .configContract)
        try container.encodeIfPresent(infoLink, forKey: .infoLink)
        try container.encodeIfPresent(message, forKey: .message)
        try container.encodeIfPresent(tags, forKey: .tags)
        try container.encodeIfPresent(presets, forKey: .presets)
        try container.encodeIfPresent(enabled, forKey: .enabled)
        try container.encodeIfPresent(enableAuto, forKey: .enableAuto)
        try container.encodeIfPresent(monitor, forKey: .monitor)
        try container.encodeIfPresent(rootFolderPath, forKey: .rootFolderPath)
        try container.encodeIfPresent(qualityProfileId, forKey: .qualityProfileId)
        try container.encodeIfPresent(searchOnAdd, forKey: .searchOnAdd)
        try container.encodeIfPresent(minimumAvailability, forKey: .minimumAvailability)
        try container.encodeIfPresent(listType, forKey: .listType)
        try container.encodeIfPresent(listOrder, forKey: .listOrder)
        try container.encodeIfPresent(minRefreshInterval, forKey: .minRefreshInterval)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension ImportListResource: Identifiable {}

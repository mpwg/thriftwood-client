//
// NotificationResource.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct NotificationResource: Sendable, Codable, ParameterConvertible, Hashable {

    public static let tagsRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    public var id: Int?
    public var name: String?
    public var fields: [Field]?
    public var implementationName: String?
    public var implementation: String?
    public var configContract: String?
    public var infoLink: String?
    public var message: ProviderMessage?
    public var tags: Set<Int>?
    public var presets: [NotificationResource]?
    public var link: String?
    public var onGrab: Bool?
    public var onDownload: Bool?
    public var onUpgrade: Bool?
    public var onRename: Bool?
    public var onMovieAdded: Bool?
    public var onMovieDelete: Bool?
    public var onMovieFileDelete: Bool?
    public var onMovieFileDeleteForUpgrade: Bool?
    public var onHealthIssue: Bool?
    public var includeHealthWarnings: Bool?
    public var onHealthRestored: Bool?
    public var onApplicationUpdate: Bool?
    public var onManualInteractionRequired: Bool?
    public var supportsOnGrab: Bool?
    public var supportsOnDownload: Bool?
    public var supportsOnUpgrade: Bool?
    public var supportsOnRename: Bool?
    public var supportsOnMovieAdded: Bool?
    public var supportsOnMovieDelete: Bool?
    public var supportsOnMovieFileDelete: Bool?
    public var supportsOnMovieFileDeleteForUpgrade: Bool?
    public var supportsOnHealthIssue: Bool?
    public var supportsOnHealthRestored: Bool?
    public var supportsOnApplicationUpdate: Bool?
    public var supportsOnManualInteractionRequired: Bool?
    public var testCommand: String?

    public init(id: Int? = nil, name: String? = nil, fields: [Field]? = nil, implementationName: String? = nil, implementation: String? = nil, configContract: String? = nil, infoLink: String? = nil, message: ProviderMessage? = nil, tags: Set<Int>? = nil, presets: [NotificationResource]? = nil, link: String? = nil, onGrab: Bool? = nil, onDownload: Bool? = nil, onUpgrade: Bool? = nil, onRename: Bool? = nil, onMovieAdded: Bool? = nil, onMovieDelete: Bool? = nil, onMovieFileDelete: Bool? = nil, onMovieFileDeleteForUpgrade: Bool? = nil, onHealthIssue: Bool? = nil, includeHealthWarnings: Bool? = nil, onHealthRestored: Bool? = nil, onApplicationUpdate: Bool? = nil, onManualInteractionRequired: Bool? = nil, supportsOnGrab: Bool? = nil, supportsOnDownload: Bool? = nil, supportsOnUpgrade: Bool? = nil, supportsOnRename: Bool? = nil, supportsOnMovieAdded: Bool? = nil, supportsOnMovieDelete: Bool? = nil, supportsOnMovieFileDelete: Bool? = nil, supportsOnMovieFileDeleteForUpgrade: Bool? = nil, supportsOnHealthIssue: Bool? = nil, supportsOnHealthRestored: Bool? = nil, supportsOnApplicationUpdate: Bool? = nil, supportsOnManualInteractionRequired: Bool? = nil, testCommand: String? = nil) {
        self.id = id
        self.name = name
        self.fields = fields
        self.implementationName = implementationName
        self.implementation = implementation
        self.configContract = configContract
        self.infoLink = infoLink
        self.message = message
        self.tags = tags
        self.presets = presets
        self.link = link
        self.onGrab = onGrab
        self.onDownload = onDownload
        self.onUpgrade = onUpgrade
        self.onRename = onRename
        self.onMovieAdded = onMovieAdded
        self.onMovieDelete = onMovieDelete
        self.onMovieFileDelete = onMovieFileDelete
        self.onMovieFileDeleteForUpgrade = onMovieFileDeleteForUpgrade
        self.onHealthIssue = onHealthIssue
        self.includeHealthWarnings = includeHealthWarnings
        self.onHealthRestored = onHealthRestored
        self.onApplicationUpdate = onApplicationUpdate
        self.onManualInteractionRequired = onManualInteractionRequired
        self.supportsOnGrab = supportsOnGrab
        self.supportsOnDownload = supportsOnDownload
        self.supportsOnUpgrade = supportsOnUpgrade
        self.supportsOnRename = supportsOnRename
        self.supportsOnMovieAdded = supportsOnMovieAdded
        self.supportsOnMovieDelete = supportsOnMovieDelete
        self.supportsOnMovieFileDelete = supportsOnMovieFileDelete
        self.supportsOnMovieFileDeleteForUpgrade = supportsOnMovieFileDeleteForUpgrade
        self.supportsOnHealthIssue = supportsOnHealthIssue
        self.supportsOnHealthRestored = supportsOnHealthRestored
        self.supportsOnApplicationUpdate = supportsOnApplicationUpdate
        self.supportsOnManualInteractionRequired = supportsOnManualInteractionRequired
        self.testCommand = testCommand
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case fields
        case implementationName
        case implementation
        case configContract
        case infoLink
        case message
        case tags
        case presets
        case link
        case onGrab
        case onDownload
        case onUpgrade
        case onRename
        case onMovieAdded
        case onMovieDelete
        case onMovieFileDelete
        case onMovieFileDeleteForUpgrade
        case onHealthIssue
        case includeHealthWarnings
        case onHealthRestored
        case onApplicationUpdate
        case onManualInteractionRequired
        case supportsOnGrab
        case supportsOnDownload
        case supportsOnUpgrade
        case supportsOnRename
        case supportsOnMovieAdded
        case supportsOnMovieDelete
        case supportsOnMovieFileDelete
        case supportsOnMovieFileDeleteForUpgrade
        case supportsOnHealthIssue
        case supportsOnHealthRestored
        case supportsOnApplicationUpdate
        case supportsOnManualInteractionRequired
        case testCommand
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(fields, forKey: .fields)
        try container.encodeIfPresent(implementationName, forKey: .implementationName)
        try container.encodeIfPresent(implementation, forKey: .implementation)
        try container.encodeIfPresent(configContract, forKey: .configContract)
        try container.encodeIfPresent(infoLink, forKey: .infoLink)
        try container.encodeIfPresent(message, forKey: .message)
        try container.encodeIfPresent(tags, forKey: .tags)
        try container.encodeIfPresent(presets, forKey: .presets)
        try container.encodeIfPresent(link, forKey: .link)
        try container.encodeIfPresent(onGrab, forKey: .onGrab)
        try container.encodeIfPresent(onDownload, forKey: .onDownload)
        try container.encodeIfPresent(onUpgrade, forKey: .onUpgrade)
        try container.encodeIfPresent(onRename, forKey: .onRename)
        try container.encodeIfPresent(onMovieAdded, forKey: .onMovieAdded)
        try container.encodeIfPresent(onMovieDelete, forKey: .onMovieDelete)
        try container.encodeIfPresent(onMovieFileDelete, forKey: .onMovieFileDelete)
        try container.encodeIfPresent(onMovieFileDeleteForUpgrade, forKey: .onMovieFileDeleteForUpgrade)
        try container.encodeIfPresent(onHealthIssue, forKey: .onHealthIssue)
        try container.encodeIfPresent(includeHealthWarnings, forKey: .includeHealthWarnings)
        try container.encodeIfPresent(onHealthRestored, forKey: .onHealthRestored)
        try container.encodeIfPresent(onApplicationUpdate, forKey: .onApplicationUpdate)
        try container.encodeIfPresent(onManualInteractionRequired, forKey: .onManualInteractionRequired)
        try container.encodeIfPresent(supportsOnGrab, forKey: .supportsOnGrab)
        try container.encodeIfPresent(supportsOnDownload, forKey: .supportsOnDownload)
        try container.encodeIfPresent(supportsOnUpgrade, forKey: .supportsOnUpgrade)
        try container.encodeIfPresent(supportsOnRename, forKey: .supportsOnRename)
        try container.encodeIfPresent(supportsOnMovieAdded, forKey: .supportsOnMovieAdded)
        try container.encodeIfPresent(supportsOnMovieDelete, forKey: .supportsOnMovieDelete)
        try container.encodeIfPresent(supportsOnMovieFileDelete, forKey: .supportsOnMovieFileDelete)
        try container.encodeIfPresent(supportsOnMovieFileDeleteForUpgrade, forKey: .supportsOnMovieFileDeleteForUpgrade)
        try container.encodeIfPresent(supportsOnHealthIssue, forKey: .supportsOnHealthIssue)
        try container.encodeIfPresent(supportsOnHealthRestored, forKey: .supportsOnHealthRestored)
        try container.encodeIfPresent(supportsOnApplicationUpdate, forKey: .supportsOnApplicationUpdate)
        try container.encodeIfPresent(supportsOnManualInteractionRequired, forKey: .supportsOnManualInteractionRequired)
        try container.encodeIfPresent(testCommand, forKey: .testCommand)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension NotificationResource: Identifiable {}

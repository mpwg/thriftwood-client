//
// ReleaseResource.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct ReleaseResource: Sendable, Codable, ParameterConvertible, Hashable {

    public var id: Int?
    public var guid: String?
    public var quality: QualityModel?
    public var customFormats: [CustomFormatResource]?
    public var customFormatScore: Int?
    public var qualityWeight: Int?
    public var age: Int?
    public var ageHours: Double?
    public var ageMinutes: Double?
    public var size: Int64?
    public var indexerId: Int?
    public var indexer: String?
    public var releaseGroup: String?
    public var subGroup: String?
    public var releaseHash: String?
    public var title: String?
    public var sceneSource: Bool?
    public var movieTitles: [String]?
    public var languages: [Language]?
    public var mappedMovieId: Int?
    public var approved: Bool?
    public var temporarilyRejected: Bool?
    public var rejected: Bool?
    public var tmdbId: Int?
    public var imdbId: Int?
    public var rejections: [String]?
    public var publishDate: Date?
    public var commentUrl: String?
    public var downloadUrl: String?
    public var infoUrl: String?
    public var movieRequested: Bool?
    public var downloadAllowed: Bool?
    public var releaseWeight: Int?
    public var edition: String?
    public var magnetUrl: String?
    public var infoHash: String?
    public var seeders: Int?
    public var leechers: Int?
    public var _protocol: DownloadProtocol?
    public var indexerFlags: JSONValue?
    public var movieId: Int?
    public var downloadClientId: Int?
    public var downloadClient: String?
    public var shouldOverride: Bool?

    public init(id: Int? = nil, guid: String? = nil, quality: QualityModel? = nil, customFormats: [CustomFormatResource]? = nil, customFormatScore: Int? = nil, qualityWeight: Int? = nil, age: Int? = nil, ageHours: Double? = nil, ageMinutes: Double? = nil, size: Int64? = nil, indexerId: Int? = nil, indexer: String? = nil, releaseGroup: String? = nil, subGroup: String? = nil, releaseHash: String? = nil, title: String? = nil, sceneSource: Bool? = nil, movieTitles: [String]? = nil, languages: [Language]? = nil, mappedMovieId: Int? = nil, approved: Bool? = nil, temporarilyRejected: Bool? = nil, rejected: Bool? = nil, tmdbId: Int? = nil, imdbId: Int? = nil, rejections: [String]? = nil, publishDate: Date? = nil, commentUrl: String? = nil, downloadUrl: String? = nil, infoUrl: String? = nil, movieRequested: Bool? = nil, downloadAllowed: Bool? = nil, releaseWeight: Int? = nil, edition: String? = nil, magnetUrl: String? = nil, infoHash: String? = nil, seeders: Int? = nil, leechers: Int? = nil, _protocol: DownloadProtocol? = nil, indexerFlags: JSONValue? = nil, movieId: Int? = nil, downloadClientId: Int? = nil, downloadClient: String? = nil, shouldOverride: Bool? = nil) {
        self.id = id
        self.guid = guid
        self.quality = quality
        self.customFormats = customFormats
        self.customFormatScore = customFormatScore
        self.qualityWeight = qualityWeight
        self.age = age
        self.ageHours = ageHours
        self.ageMinutes = ageMinutes
        self.size = size
        self.indexerId = indexerId
        self.indexer = indexer
        self.releaseGroup = releaseGroup
        self.subGroup = subGroup
        self.releaseHash = releaseHash
        self.title = title
        self.sceneSource = sceneSource
        self.movieTitles = movieTitles
        self.languages = languages
        self.mappedMovieId = mappedMovieId
        self.approved = approved
        self.temporarilyRejected = temporarilyRejected
        self.rejected = rejected
        self.tmdbId = tmdbId
        self.imdbId = imdbId
        self.rejections = rejections
        self.publishDate = publishDate
        self.commentUrl = commentUrl
        self.downloadUrl = downloadUrl
        self.infoUrl = infoUrl
        self.movieRequested = movieRequested
        self.downloadAllowed = downloadAllowed
        self.releaseWeight = releaseWeight
        self.edition = edition
        self.magnetUrl = magnetUrl
        self.infoHash = infoHash
        self.seeders = seeders
        self.leechers = leechers
        self._protocol = _protocol
        self.indexerFlags = indexerFlags
        self.movieId = movieId
        self.downloadClientId = downloadClientId
        self.downloadClient = downloadClient
        self.shouldOverride = shouldOverride
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case guid
        case quality
        case customFormats
        case customFormatScore
        case qualityWeight
        case age
        case ageHours
        case ageMinutes
        case size
        case indexerId
        case indexer
        case releaseGroup
        case subGroup
        case releaseHash
        case title
        case sceneSource
        case movieTitles
        case languages
        case mappedMovieId
        case approved
        case temporarilyRejected
        case rejected
        case tmdbId
        case imdbId
        case rejections
        case publishDate
        case commentUrl
        case downloadUrl
        case infoUrl
        case movieRequested
        case downloadAllowed
        case releaseWeight
        case edition
        case magnetUrl
        case infoHash
        case seeders
        case leechers
        case _protocol = "protocol"
        case indexerFlags
        case movieId
        case downloadClientId
        case downloadClient
        case shouldOverride
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(guid, forKey: .guid)
        try container.encodeIfPresent(quality, forKey: .quality)
        try container.encodeIfPresent(customFormats, forKey: .customFormats)
        try container.encodeIfPresent(customFormatScore, forKey: .customFormatScore)
        try container.encodeIfPresent(qualityWeight, forKey: .qualityWeight)
        try container.encodeIfPresent(age, forKey: .age)
        try container.encodeIfPresent(ageHours, forKey: .ageHours)
        try container.encodeIfPresent(ageMinutes, forKey: .ageMinutes)
        try container.encodeIfPresent(size, forKey: .size)
        try container.encodeIfPresent(indexerId, forKey: .indexerId)
        try container.encodeIfPresent(indexer, forKey: .indexer)
        try container.encodeIfPresent(releaseGroup, forKey: .releaseGroup)
        try container.encodeIfPresent(subGroup, forKey: .subGroup)
        try container.encodeIfPresent(releaseHash, forKey: .releaseHash)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(sceneSource, forKey: .sceneSource)
        try container.encodeIfPresent(movieTitles, forKey: .movieTitles)
        try container.encodeIfPresent(languages, forKey: .languages)
        try container.encodeIfPresent(mappedMovieId, forKey: .mappedMovieId)
        try container.encodeIfPresent(approved, forKey: .approved)
        try container.encodeIfPresent(temporarilyRejected, forKey: .temporarilyRejected)
        try container.encodeIfPresent(rejected, forKey: .rejected)
        try container.encodeIfPresent(tmdbId, forKey: .tmdbId)
        try container.encodeIfPresent(imdbId, forKey: .imdbId)
        try container.encodeIfPresent(rejections, forKey: .rejections)
        try container.encodeIfPresent(publishDate, forKey: .publishDate)
        try container.encodeIfPresent(commentUrl, forKey: .commentUrl)
        try container.encodeIfPresent(downloadUrl, forKey: .downloadUrl)
        try container.encodeIfPresent(infoUrl, forKey: .infoUrl)
        try container.encodeIfPresent(movieRequested, forKey: .movieRequested)
        try container.encodeIfPresent(downloadAllowed, forKey: .downloadAllowed)
        try container.encodeIfPresent(releaseWeight, forKey: .releaseWeight)
        try container.encodeIfPresent(edition, forKey: .edition)
        try container.encodeIfPresent(magnetUrl, forKey: .magnetUrl)
        try container.encodeIfPresent(infoHash, forKey: .infoHash)
        try container.encodeIfPresent(seeders, forKey: .seeders)
        try container.encodeIfPresent(leechers, forKey: .leechers)
        try container.encodeIfPresent(_protocol, forKey: ._protocol)
        try container.encodeIfPresent(indexerFlags, forKey: .indexerFlags)
        try container.encodeIfPresent(movieId, forKey: .movieId)
        try container.encodeIfPresent(downloadClientId, forKey: .downloadClientId)
        try container.encodeIfPresent(downloadClient, forKey: .downloadClient)
        try container.encodeIfPresent(shouldOverride, forKey: .shouldOverride)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension ReleaseResource: Identifiable {}
